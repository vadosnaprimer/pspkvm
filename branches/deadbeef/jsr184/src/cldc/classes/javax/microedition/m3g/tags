!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ALPHA	CompositingMode.java	/^	public static final int ALPHA 		= 64;$/;"	f	class:CompositingMode
ALPHA	Image2D.java	/^	public static final int ALPHA = 96;$/;"	f	class:Image2D
ALPHA_ADD	CompositingMode.java	/^	public static final int	ALPHA_ADD 	= 65;$/;"	f	class:CompositingMode
AMBIENT	Light.java	/^	public static final int AMBIENT 	= 128;$/;"	f	class:Light
AMBIENT	Material.java	/^	public static final int AMBIENT 	= 1024;$/;"	f	class:Material
Appearance	Appearance.java	/^	public Appearance()$/;"	m	class:Appearance
Appearance	Appearance.java	/^public class Appearance extends Object3D {$/;"	c
BORDER	Background.java	/^	public static final int BORDER = 32;$/;"	f	class:Background
Background	Background.java	/^	public Background()$/;"	m	class:Background
Background	Background.java	/^public class Background extends Object3D {$/;"	c
BufferUtil	util/BufferUtil.java	/^public class BufferUtil {$/;"	c
CULL_BACK	PolygonMode.java	/^	public static final int CULL_BACK 		= 160;$/;"	f	class:PolygonMode
CULL_FRONT	PolygonMode.java	/^	public static final int CULL_FRONT 		= 161;$/;"	f	class:PolygonMode
CULL_NONE	PolygonMode.java	/^	public static final int CULL_NONE 		= 162;$/;"	f	class:PolygonMode
Camera	Camera.java	/^	public Camera()$/;"	m	class:Camera
Camera	Camera.java	/^public class Camera extends Node {$/;"	c
Color	util/Color.java	/^	public Color(float a, float r, float g, float b)$/;"	m	class:Color
Color	util/Color.java	/^	public Color(int color)$/;"	m	class:Color
Color	util/Color.java	/^public class Color {$/;"	c
CompositingMode	CompositingMode.java	/^	public CompositingMode()$/;"	m	class:CompositingMode
CompositingMode	CompositingMode.java	/^public class CompositingMode extends Object3D {$/;"	c
Constants	vecMath/Constants.java	/^public class Constants {$/;"	c
DIFFUSE	Material.java	/^	public static final int DIFFUSE 	= 2048;$/;"	f	class:Material
DIRECTIONAL	Light.java	/^	public static final int DIRECTIONAL = 129;$/;"	f	class:Light
EMISSIVE	Material.java	/^	public static final int EMISSIVE	= 4096;$/;"	f	class:Material
EPSILON	vecMath/Constants.java	/^	static final float EPSILON = 0.0000001f;$/;"	f	class:Constants
EXPONENTIAL	Fog.java	/^	public static final int EXPONENTIAL = 80;$/;"	f	class:Fog
FILTER_BASE_LEVEL	Texture2D.java	/^	public static final int FILTER_BASE_LEVEL = 208;$/;"	f	class:Texture2D
FILTER_LINEAR	Texture2D.java	/^	public static final int FILTER_LINEAR = 209;$/;"	f	class:Texture2D
FILTER_NEAREST	Texture2D.java	/^	public static final int FILTER_NEAREST = 210;$/;"	f	class:Texture2D
FUNC_ADD	Texture2D.java	/^	public static final int FUNC_ADD = 224;$/;"	f	class:Texture2D
FUNC_BLEND	Texture2D.java	/^	public static final int FUNC_BLEND = 225;$/;"	f	class:Texture2D
FUNC_DECAL	Texture2D.java	/^	public static final int FUNC_DECAL = 226;$/;"	f	class:Texture2D
FUNC_MODULATE	Texture2D.java	/^	public static final int FUNC_MODULATE = 227;$/;"	f	class:Texture2D
FUNC_REPLACE	Texture2D.java	/^	public static final int FUNC_REPLACE = 228;$/;"	f	class:Texture2D
Fog	Fog.java	/^public class Fog extends Object3D {$/;"	c
GENERIC	Camera.java	/^	public static final int GENERIC = 48;$/;"	f	class:Camera
GL	opengl/GL.java	/^    public GL(javax.microedition.khronos.opengles.GL jsr239GL){$/;"	m	class:GL
GL	opengl/GL.java	/^public class GL {$/;"	c
GLCanvas	opengl/GLCanvas.java	/^    GLCanvas(Graphics g2D){$/;"	m	class:GLCanvas
GLCanvas	opengl/GLCanvas.java	/^public class GLCanvas {$/;"	c
GLContext	opengl/GLContext.java	/^    public GLContext(Graphics g){$/;"	m	class:GLContext
GLContext	opengl/GLContext.java	/^public class GLContext {$/;"	c
GLME	opengl/GLME.java	/^public class GLME {$/;"	c
GLRenderHelper	opengl/GLRenderHelper.java	/^public class GLRenderHelper {$/;"	c
GLU	opengl/GLU.java	/^public class GLU {$/;"	c
GL_ALPHA_TEST	opengl/GL.java	/^    public static final int GL_ALPHA_TEST = 3008;$/;"	f	class:GL
GL_AMBIENT	opengl/GL.java	/^    public static final int GL_AMBIENT = 4608;$/;"	f	class:GL
GL_BACK	opengl/GL.java	/^    public static final int GL_BACK = 1029;$/;"	f	class:GL
GL_BLEND	opengl/GL.java	/^    public static final int GL_BLEND = 3042;$/;"	f	class:GL
GL_BYTE	opengl/GL.java	/^    public static final int GL_BYTE = 5120;$/;"	f	class:GL
GL_CCW	opengl/GL.java	/^    public static final int GL_CCW = 2305;$/;"	f	class:GL
GL_COLOR_ARRAY	opengl/GL.java	/^    public static final int GL_COLOR_ARRAY = 32886;$/;"	f	class:GL
GL_COLOR_BUFFER_BIT	opengl/GL.java	/^    public static final int GL_COLOR_BUFFER_BIT = 16384; $/;"	f	class:GL
GL_CONSTANT_ATTENUATION	opengl/GL.java	/^    public static final int GL_CONSTANT_ATTENUATION = 4615;$/;"	f	class:GL
GL_CULL_FACE	opengl/GL.java	/^    public static final int GL_CULL_FACE = 2884;$/;"	f	class:GL
GL_CW	opengl/GL.java	/^    public static final int GL_CW = 2304;$/;"	f	class:GL
GL_DEPTH_BUFFER_BIT	opengl/GL.java	/^    public static final int GL_DEPTH_BUFFER_BIT = 256;$/;"	f	class:GL
GL_DEPTH_TEST	opengl/GL.java	/^    public static final int GL_DEPTH_TEST = 2929;$/;"	f	class:GL
GL_DIFFUSE	opengl/GL.java	/^    public static final int GL_DIFFUSE = 4609;$/;"	f	class:GL
GL_DST_COLOR	opengl/GL.java	/^    public static final int GL_DST_COLOR = 774;$/;"	f	class:GL
GL_EMISSION	opengl/GL.java	/^    public static final int GL_EMISSION = 5632;$/;"	f	class:GL
GL_EXP	opengl/GL.java	/^    public static final int GL_EXP = 2048;$/;"	f	class:GL
GL_FLAT	opengl/GL.java	/^    public static final int GL_FLAT = 7424;$/;"	f	class:GL
GL_FLOAT	opengl/GL.java	/^    public static final int GL_FLOAT = 5126;$/;"	f	class:GL
GL_FOG	opengl/GL.java	/^    public static final int GL_FOG = 2912;$/;"	f	class:GL
GL_FOG_COLOR	opengl/GL.java	/^    public static final int GL_FOG_COLOR = 2918;$/;"	f	class:GL
GL_FOG_DENSITY	opengl/GL.java	/^    public static final int GL_FOG_DENSITY = 2914;$/;"	f	class:GL
GL_FOG_END	opengl/GL.java	/^    public static final int GL_FOG_END = 2916;$/;"	f	class:GL
GL_FOG_MODE	opengl/GL.java	/^    public static final int GL_FOG_MODE = 2917;$/;"	f	class:GL
GL_FOG_START	opengl/GL.java	/^    public static final int GL_FOG_START = 2915;$/;"	f	class:GL
GL_FRONT	opengl/GL.java	/^    public static final int GL_FRONT = 1028;$/;"	f	class:GL
GL_FRONT_AND_BACK	opengl/GL.java	/^    public static final int GL_FRONT_AND_BACK = 1032;$/;"	f	class:GL
GL_FUNC_ADD	opengl/GL.java	/^    public static final int GL_FUNC_ADD = 32774;$/;"	f	class:GL
GL_GEQUAL	opengl/GL.java	/^    public static final int GL_GEQUAL = 518;$/;"	f	class:GL
GL_LEQUAL	opengl/GL.java	/^    public static final int GL_LEQUAL = 515;$/;"	f	class:GL
GL_LIGHT0	opengl/GL.java	/^    public static final int GL_LIGHT0 = 16384;$/;"	f	class:GL
GL_LIGHTING	opengl/GL.java	/^    public static final int GL_LIGHTING = 2896;$/;"	f	class:GL
GL_LIGHT_MODEL_AMBIENT	opengl/GL.java	/^    public static final int GL_LIGHT_MODEL_AMBIENT = 2899;$/;"	f	class:GL
GL_LINEAR	opengl/GL.java	/^    public static final int GL_LINEAR = 9729;$/;"	f	class:GL
GL_LINEAR_ATTENUATION	opengl/GL.java	/^    public static final int GL_LINEAR_ATTENUATION = 4616;$/;"	f	class:GL
GL_MODELVIEW	opengl/GL.java	/^    public static final int GL_MODELVIEW = 5888;$/;"	f	class:GL
GL_MODELVIEW_MATRIX	opengl/GL.java	/^    public static final int GL_MODELVIEW_MATRIX = 2982;$/;"	f	class:GL
GL_NORMALIZE	opengl/GL.java	/^    public static final int GL_NORMALIZE = 2977;$/;"	f	class:GL
GL_NORMAL_ARRAY	opengl/GL.java	/^    public static final int GL_NORMAL_ARRAY = 32885;$/;"	f	class:GL
GL_ONE	opengl/GL.java	/^    public static final int GL_ONE = 1;$/;"	f	class:GL
GL_ONE_MINUS_SRC_ALPHA	opengl/GL.java	/^    public static final int GL_ONE_MINUS_SRC_ALPHA = 771;$/;"	f	class:GL
GL_POLYGON_OFFSET_FILL	opengl/GL.java	/^    public static final int GL_POLYGON_OFFSET_FILL = 32823;$/;"	f	class:GL
GL_POSITION	opengl/GL.java	/^    public static final int GL_POSITION = 4611;$/;"	f	class:GL
GL_PROJECTION	opengl/GL.java	/^    public static final int GL_PROJECTION = 5889;$/;"	f	class:GL
GL_QUADRATIC_ATTENUATION	opengl/GL.java	/^    public static final int GL_QUADRATIC_ATTENUATION = 4617;$/;"	f	class:GL
GL_QUADS	opengl/GL.java	/^    public static final int GL_QUADS = 7;$/;"	f	class:GL
GL_SHORT	opengl/GL.java	/^    public static final int GL_SHORT = 5122;$/;"	f	class:GL
GL_SMOOTH	opengl/GL.java	/^    public static final int GL_SMOOTH = 7425;$/;"	f	class:GL
GL_SPECULAR	opengl/GL.java	/^    public static final int GL_SPECULAR = 4610;$/;"	f	class:GL
GL_SPOT_CUTOFF	opengl/GL.java	/^    public static final int GL_SPOT_CUTOFF = 4614;$/;"	f	class:GL
GL_SPOT_DIRECTION	opengl/GL.java	/^    public static final int GL_SPOT_DIRECTION = 4612;$/;"	f	class:GL
GL_SPOT_EXPONENT	opengl/GL.java	/^    public static final int GL_SPOT_EXPONENT = 4613;$/;"	f	class:GL
GL_SRC_ALPHA	opengl/GL.java	/^    public static final int GL_SRC_ALPHA = 770;$/;"	f	class:GL
GL_SRC_COLOR	opengl/GL.java	/^    public static final int GL_SRC_COLOR = 768;$/;"	f	class:GL
GL_TEXTURE0	opengl/GL.java	/^    public static final int GL_TEXTURE0 = 33984;$/;"	f	class:GL
GL_TEXTURE_2D	opengl/GL.java	/^    public static final int GL_TEXTURE_2D = 3553;$/;"	f	class:GL
GL_TEXTURE_COORD_ARRAY	opengl/GL.java	/^    public static final int GL_TEXTURE_COORD_ARRAY = 32888;$/;"	f	class:GL
GL_TEXTURE_ENV_COLOR	opengl/GL.java	/^    public static final int GL_TEXTURE_ENV_COLOR = 8705;$/;"	f	class:GL
GL_TEXTURE_ENV_MODE	opengl/GL.java	/^    public static final int GL_TEXTURE_ENV_MODE = 8704;$/;"	f	class:GL
GL_TEXTURE_MAG_FILTER	opengl/GL.java	/^    public static final int GL_TEXTURE_MAG_FILTER = 10240;$/;"	f	class:GL
GL_TEXTURE_MIN_FILTER	opengl/GL.java	/^    public static final int GL_TEXTURE_MIN_FILTER = 10241;$/;"	f	class:GL
GL_TEXTURE_WRAP_S	opengl/GL.java	/^    public static final int GL_TEXTURE_WRAP_S = 10242;$/;"	f	class:GL
GL_TEXTURE_WRAP_T	opengl/GL.java	/^    public static final int GL_TEXTURE_WRAP_T = 10243;$/;"	f	class:GL
GL_TRIANGLES	opengl/GL.java	/^    public static final int GL_TRIANGLES = 4;$/;"	f	class:GL
GL_TRIANGLE_STRIP	opengl/GL.java	/^    public static final int GL_TRIANGLE_STRIP = 5;$/;"	f	class:GL
GL_UNSIGNED_BYTE	opengl/GL.java	/^    public static final int GL_UNSIGNED_BYTE = 5121;$/;"	f	class:GL
GL_VERTEX_ARRAY	opengl/GL.java	/^    public static final int GL_VERTEX_ARRAY = 32884;$/;"	f	class:GL
GL_ZERO	opengl/GL.java	/^    public static final int GL_ZERO = 0;$/;"	f	class:GL
Graphics3D	Graphics3D.java	/^	private Graphics3D()$/;"	m	class:Graphics3D	file:
Graphics3D	Graphics3D.java	/^public final class Graphics3D {$/;"	c
Group	Group.java	/^	public Group()$/;"	m	class:Group
Group	Group.java	/^public class Group extends Node {$/;"	c
IDENTIFIER	Loader.java	/^	private static final byte[] IDENTIFIER = { (byte)0xAB, 0x4A, 0x53, 0x52, 0x31, 0x38, 0x34, (byte)0xBB, 0x0D, 0x0A, 0x1A, 0x0A };$/;"	f	class:Loader	file:
Image2D	Image2D.java	/^	public Image2D(int format, Object image)$/;"	m	class:Image2D
Image2D	Image2D.java	/^	public Image2D(int format, int width, int height)$/;"	m	class:Image2D
Image2D	Image2D.java	/^	public Image2D(int format, int width, int height, byte[] image)$/;"	m	class:Image2D
Image2D	Image2D.java	/^	public Image2D(int format, int width, int height, byte[] image, byte[] palette)$/;"	m	class:Image2D
Image2D	Image2D.java	/^public class Image2D extends Object3D {$/;"	c
IndexBuffer	IndexBuffer.java	/^public abstract class IndexBuffer extends Object3D {$/;"	c
LINEAR	Fog.java	/^	public static final int LINEAR 		= 81;$/;"	f	class:Fog
LUMINANCE	Image2D.java	/^	public static final int LUMINANCE = 97;$/;"	f	class:Image2D
LUMINANCE_ALPHA	Image2D.java	/^	public static final int LUMINANCE_ALPHA = 98;$/;"	f	class:Image2D
Light	Light.java	/^	public Light()$/;"	m	class:Light
Light	Light.java	/^public class Light extends Node {$/;"	c
Loader	Loader.java	/^public class Loader {$/;"	c
MAX_LIGHT_COUNT	Graphics3D.java	/^	static final int MAX_LIGHT_COUNT = 8;$/;"	f	class:Graphics3D
MODULATE	CompositingMode.java	/^	public static final int MODULATE 	= 66;$/;"	f	class:CompositingMode
MODULATE_X2	CompositingMode.java	/^	public static final int MODULATE_X2 = 67;$/;"	f	class:CompositingMode
Material	Material.java	/^	public Material()$/;"	m	class:Material
Material	Material.java	/^public class Material extends Object3D {$/;"	c
Mesh	Mesh.java	/^	public Mesh(VertexBuffer vertices,$/;"	m	class:Mesh
Mesh	Mesh.java	/^public class Mesh extends Node {$/;"	c
NONE	Node.java	/^	public static final int NONE	= 144;$/;"	f	class:Node
Node	Node.java	/^public abstract class Node extends Transformable {$/;"	c
OMNI	Light.java	/^	public static final int OMNI 		= 130;$/;"	f	class:Light
ORIGIN	Node.java	/^	public static final int ORIGIN 	= 145;$/;"	f	class:Node
Object3D	Object3D.java	/^public abstract class Object3D {$/;"	c
PARALLEL	Camera.java	/^	public static final int PARALLEL = 49;$/;"	f	class:Camera
PERSPECTIVE	Camera.java	/^	public static final int PERSPECTIVE = 50;$/;"	f	class:Camera
PolygonMode	PolygonMode.java	/^public class PolygonMode extends Object3D {$/;"	c
REPEAT	Background.java	/^	public static final int REPEAT = 33;$/;"	f	class:Background
REPLACE	CompositingMode.java	/^	public static final int REPLACE 	= 68;$/;"	f	class:CompositingMode
RGB	Image2D.java	/^	public static final int RGB = 99;$/;"	f	class:Image2D
RGBA	Image2D.java	/^	public static final int RGBA = 100;$/;"	f	class:Image2D
RenderEventListener	RenderEventListener.java	/^public abstract class RenderEventListener \/*implements GLEventListener*\/$/;"	c
ResourceRetriever	util/ResourceRetriever.java	/^ public class ResourceRetriever {$/;"	c
SHADE_FLAT	PolygonMode.java	/^	public static final int	SHADE_FLAT 		= 164;$/;"	f	class:PolygonMode
SHADE_SMOOTH	PolygonMode.java	/^	public static final int SHADE_SMOOTH 	= 165;$/;"	f	class:PolygonMode
SPECULAR	Material.java	/^	public static final int SPECULAR 	= 8192;$/;"	f	class:Material
SPOT	Light.java	/^	public static final int SPOT 		= 131;$/;"	f	class:Light
Sprite3D	Sprite3D.java	/^	public Sprite3D(boolean scaled, Image2D image, Appearance appearance)$/;"	m	class:Sprite3D
Sprite3D	Sprite3D.java	/^public class Sprite3D extends Node {$/;"	c
TO_RADIANS	vecMath/Constants.java	/^	public static final float TO_RADIANS = 0.017453292519943295769236907684886f;$/;"	f	class:Constants
Texture2D	Texture2D.java	/^	public Texture2D(Image2D image) {$/;"	m	class:Texture2D
Texture2D	Texture2D.java	/^public class Texture2D extends Transformable {$/;"	c
Transform	Transform.java	/^	public Transform()$/;"	m	class:Transform
Transform	Transform.java	/^	public Transform(Transform transform)$/;"	m	class:Transform
Transform	Transform.java	/^public class Transform {$/;"	c
Transformable	Transformable.java	/^public abstract class Transformable extends Object3D {$/;"	c
TriangleStripArray	TriangleStripArray.java	/^	public TriangleStripArray(int firstIndex, int[] stripLengths)$/;"	m	class:TriangleStripArray
TriangleStripArray	TriangleStripArray.java	/^	public TriangleStripArray(int[] indices, int[] stripLengths)$/;"	m	class:TriangleStripArray
TriangleStripArray	TriangleStripArray.java	/^public class TriangleStripArray extends IndexBuffer {$/;"	c
Vector2	vecMath/Vector2.java	/^	public Vector2()$/;"	m	class:Vector2
Vector2	vecMath/Vector2.java	/^	public Vector2(Vector2 v)$/;"	m	class:Vector2
Vector2	vecMath/Vector2.java	/^	public Vector2(float x, float y)$/;"	m	class:Vector2
Vector2	vecMath/Vector2.java	/^	public Vector2(float[] v)$/;"	m	class:Vector2
Vector2	vecMath/Vector2.java	/^public class Vector2 {$/;"	c
Vector3	vecMath/Vector3.java	/^	public Vector3()$/;"	m	class:Vector3
Vector3	vecMath/Vector3.java	/^	public Vector3(Vector3 v)$/;"	m	class:Vector3
Vector3	vecMath/Vector3.java	/^	public Vector3(float x, float y, float z)$/;"	m	class:Vector3
Vector3	vecMath/Vector3.java	/^	public Vector3(float[] v)$/;"	m	class:Vector3
Vector3	vecMath/Vector3.java	/^public class Vector3 {$/;"	c
Vector4	vecMath/Vector4.java	/^	public Vector4()$/;"	m	class:Vector4
Vector4	vecMath/Vector4.java	/^	public Vector4(Vector4 v)$/;"	m	class:Vector4
Vector4	vecMath/Vector4.java	/^	public Vector4(float x, float y, float z, float w)$/;"	m	class:Vector4
Vector4	vecMath/Vector4.java	/^	public Vector4(float[] v)$/;"	m	class:Vector4
Vector4	vecMath/Vector4.java	/^public class Vector4 {$/;"	c
VertexArray	VertexArray.java	/^	public VertexArray(int numVertices, int numComponents, int componentSize)$/;"	m	class:VertexArray
VertexArray	VertexArray.java	/^public class VertexArray extends Object3D {$/;"	c
VertexBuffer	VertexBuffer.java	/^	public VertexBuffer()$/;"	m	class:VertexBuffer
VertexBuffer	VertexBuffer.java	/^public class VertexBuffer extends Object3D {$/;"	c
WINDING_CCW	PolygonMode.java	/^	public static final int	WINDING_CCW		= 168;$/;"	f	class:PolygonMode
WINDING_CW	PolygonMode.java	/^	public static final int WINDING_CW		= 169;$/;"	f	class:PolygonMode
WRAP_CLAMP	Texture2D.java	/^	public static final int WRAP_CLAMP = 240;$/;"	f	class:Texture2D
WRAP_REPEAT	Texture2D.java	/^	public static final int WRAP_REPEAT = 241;$/;"	f	class:Texture2D
World	World.java	/^	public World()$/;"	m	class:World
World	World.java	/^public class World extends Group {$/;"	c
X_AXIS	Node.java	/^	public static final int X_AXIS 	= 146;$/;"	f	class:Node
Y_AXIS	Node.java	/^	public static final int Y_AXIS	= 147;$/;"	f	class:Node
Z_AXIS	Node.java	/^	public static final int Z_AXIS 	= 148;$/;"	f	class:Node
a	util/Color.java	/^	public float a = 0.0f;$/;"	f	class:Color
activeCamera	World.java	/^	private Camera activeCamera;$/;"	f	class:World	file:
add	vecMath/Vector2.java	/^	public void add(Vector2 v)$/;"	m	class:Vector2
add	vecMath/Vector2.java	/^	public void add(Vector2 v, float scalar)$/;"	m	class:Vector2
add	vecMath/Vector2.java	/^	public void add(Vector2 v1, Vector2 v2)$/;"	m	class:Vector2
add	vecMath/Vector2.java	/^	public void add(float scalar)$/;"	m	class:Vector2
add	vecMath/Vector3.java	/^	public void add(Vector3 v)$/;"	m	class:Vector3
add	vecMath/Vector3.java	/^	public void add(Vector3 v, float scalar)$/;"	m	class:Vector3
add	vecMath/Vector3.java	/^	public void add(Vector3 v1, Vector3 v2)$/;"	m	class:Vector3
add	vecMath/Vector3.java	/^	public void add(float scalar)$/;"	m	class:Vector3
add	vecMath/Vector4.java	/^	public void add(Vector4 v)$/;"	m	class:Vector4
add	vecMath/Vector4.java	/^	public void add(Vector4 v, float scalar)$/;"	m	class:Vector4
add	vecMath/Vector4.java	/^	public void add(Vector4 v1, Vector4 v2)$/;"	m	class:Vector4
add	vecMath/Vector4.java	/^	public void add(float scalar)$/;"	m	class:Vector4
addChild	Group.java	/^	public void addChild(Node child)$/;"	m	class:Group
addGLEventListener	opengl/GLCanvas.java	/^    public void addGLEventListener(RenderEventListener listener) {$/;"	m	class:GLCanvas
addLight	Graphics3D.java	/^	public int addLight(Light light, Transform transform)$/;"	m	class:Graphics3D
align	Node.java	/^	public final void align(Node reference)$/;"	m	class:Node
allocate	IndexBuffer.java	/^	protected void allocate(int numElements)$/;"	m	class:IndexBuffer
alpha	Node.java	/^	protected float alpha 				= 1.0f;$/;"	f	class:Node
alphaThreshold	CompositingMode.java	/^	private float alphaThreshold 		= 0.0f;$/;"	f	class:CompositingMode	file:
alphaWriteEnabled	CompositingMode.java	/^	private boolean alphaWriteEnabled 	= true;$/;"	f	class:CompositingMode	file:
ambientColor	Material.java	/^	private int ambientColor 			= 0x00333333;$/;"	f	class:Material	file:
appearance	Sprite3D.java	/^	private Appearance appearance;$/;"	f	class:Sprite3D	file:
appearances	Mesh.java	/^	private ArrayList appearances = new ArrayList();$/;"	f	class:Mesh	file:
aspectRatio	Camera.java	/^	private float aspectRatio;$/;"	f	class:Camera	file:
attenuationConstant	Light.java	/^	private float attenuationConstant 	= 1;$/;"	f	class:Light	file:
attenuationLinear	Light.java	/^	private float attenuationLinear 	= 0;$/;"	f	class:Light	file:
attenuationQuadratic	Light.java	/^	private float attenuationQuadratic 	= 0;$/;"	f	class:Light	file:
b	util/Color.java	/^	public float b = 0.0f;$/;"	f	class:Color
background	World.java	/^	private Background background;$/;"	f	class:World	file:
backgroundColor	Background.java	/^	private int backgroundColor = 0;$/;"	f	class:Background	file:
backgroundImage	Background.java	/^	private Image2D backgroundImage = null;$/;"	f	class:Background	file:
backgroundImageModeX	Background.java	/^	private int backgroundImageModeX = BORDER;$/;"	f	class:Background	file:
backgroundImageModeY	Background.java	/^	private int backgroundImageModeY = BORDER;$/;"	f	class:Background	file:
backgroundTexture	Background.java	/^	private Texture2D backgroundTexture = null;$/;"	f	class:Background	file:
bindTarget	Graphics3D.java	/^	public void bindTarget(Object target)$/;"	m	class:Graphics3D
bindTarget	Graphics3D.java	/^	public void bindTarget(Object target, RenderEventListener renderListener)$/;"	m	class:Graphics3D
bindTarget	Graphics3D.java	/^	public void bindTarget(Object target, boolean depthBuffer, int hints)$/;"	m	class:Graphics3D
blendColor	Texture2D.java	/^	private int blendColor = 0;$/;"	f	class:Texture2D	file:
blending	CompositingMode.java	/^	private int blending				= REPLACE;$/;"	f	class:CompositingMode	file:
blending	Texture2D.java	/^	private int blending = FUNC_MODULATE;$/;"	f	class:Texture2D	file:
buffer	IndexBuffer.java	/^	protected IntBuffer buffer = null;$/;"	f	class:IndexBuffer
buffer	VertexArray.java	/^	private Buffer buffer;$/;"	f	class:VertexArray	file:
camera	Graphics3D.java	/^	private Camera camera;$/;"	f	class:Graphics3D	file:
cameraTransform	Graphics3D.java	/^	private Transform cameraTransform;$/;"	f	class:Graphics3D	file:
canvas	opengl/GLME.java	/^    private GLCanvas canvas ;$/;"	f	class:GLME	file:
checkByteInput	VertexArray.java	/^	private void checkByteInput(int firstVertex, int numVertices, int numElements, byte[] values)$/;"	m	class:VertexArray	file:
checkInput	TriangleStripArray.java	/^	private int checkInput(int[] stripLengths)$/;"	m	class:TriangleStripArray	file:
checkInput	VertexArray.java	/^	private void checkInput(int firstVertex, int numVertices, int numElements, int arrayLength)$/;"	m	class:VertexArray	file:
checkShortInput	VertexArray.java	/^	private void checkShortInput(int firstVertex, int numVertices, int numElements, short[] values)$/;"	m	class:VertexArray	file:
children	Group.java	/^	protected ArrayList children; $/;"	f	class:Group
clear	Graphics3D.java	/^	public void clear(Background background)$/;"	m	class:Graphics3D
color	Fog.java	/^	private int color 			= 0;$/;"	f	class:Fog	file:
color	Light.java	/^	private int color 					= 0x00FFFFFF;$/;"	f	class:Light	file:
colorClearEnabled	Background.java	/^	private boolean colorClearEnabled = true;$/;"	f	class:Background	file:
colorWriteEnabled	CompositingMode.java	/^	private boolean colorWriteEnabled 	= true;$/;"	f	class:CompositingMode	file:
colors	VertexBuffer.java	/^	private VertexArray colors = null;$/;"	f	class:VertexBuffer	file:
componentSize	VertexArray.java	/^	private int componentSize;$/;"	f	class:VertexArray	file:
compositingMode	Appearance.java	/^	private CompositingMode compositingMode;$/;"	f	class:Appearance	file:
cropHeight	Background.java	/^	private int cropHeight;$/;"	f	class:Background	file:
cropWidth	Background.java	/^	private int cropWidth;$/;"	f	class:Background	file:
cropX	Background.java	/^	private int cropX;$/;"	f	class:Background	file:
cropY	Background.java	/^	private int cropY;$/;"	f	class:Background	file:
cross	vecMath/Vector3.java	/^	public void cross(Vector3 v)$/;"	m	class:Vector3
cross	vecMath/Vector3.java	/^	public void cross(Vector3 v1, Vector3 v2)$/;"	m	class:Vector3
culling	PolygonMode.java	/^	private int culling = CULL_BACK;$/;"	f	class:PolygonMode	file:
currentGLCanvas	Graphics3D.java	/^	private GLCanvas currentGLCanvas;$/;"	f	class:Graphics3D	file:
currentRenderListener	Graphics3D.java	/^	private RenderEventListener currentRenderListener;$/;"	f	class:Graphics3D	file:
defaultColor	VertexBuffer.java	/^	private int defaultColor = 0xFFFFFFFF;$/;"	f	class:VertexBuffer	file:
defaultCompositioningMode	Graphics3D.java	/^	private CompositingMode defaultCompositioningMode = new CompositingMode();$/;"	f	class:Graphics3D	file:
defaultPolygonMode	Graphics3D.java	/^	private PolygonMode defaultPolygonMode = new PolygonMode();$/;"	f	class:Graphics3D	file:
density	Fog.java	/^	private float density 		= 1.0f;$/;"	f	class:Fog	file:
depthClearEnabled	Background.java	/^	private boolean depthClearEnabled = true;$/;"	f	class:Background	file:
depthOffsetFactor	CompositingMode.java	/^	private float depthOffsetFactor 	= 0.0f;$/;"	f	class:CompositingMode	file:
depthOffsetUnits	CompositingMode.java	/^	private float depthOffsetUnits 		= 0.0f;$/;"	f	class:CompositingMode	file:
depthTestEnabled	CompositingMode.java	/^	private boolean depthTestEnabled	= true;$/;"	f	class:CompositingMode	file:
depthWriteEnabled	CompositingMode.java	/^	private boolean depthWriteEnabled 	= true;$/;"	f	class:CompositingMode	file:
diffuseColor	Material.java	/^	private int diffuseColor 			= 0xFFCCCCCC;$/;"	f	class:Material	file:
disableTextureUnits	Graphics3D.java	/^	void disableTextureUnits()$/;"	m	class:Graphics3D
display	opengl/GLCanvas.java	/^    public void display() {$/;"	m	class:GLCanvas
dot	vecMath/Vector2.java	/^	public float dot(Vector2 v)$/;"	m	class:Vector2
dot	vecMath/Vector3.java	/^	public float dot(Vector3 v)$/;"	m	class:Vector3
dot	vecMath/Vector4.java	/^	public float dot(Vector4 v)$/;"	m	class:Vector4
duplicate	Object3D.java	/^	public final Object3D duplicate() $/;"	m	class:Object3D
egl	opengl/GLContext.java	/^    private EGL10 egl;$/;"	f	class:GLContext	file:
eglConfig	opengl/GLContext.java	/^    private EGLConfig eglConfig;$/;"	f	class:GLContext	file:
eglContext	opengl/GLContext.java	/^    private EGLContext eglContext;$/;"	f	class:GLContext	file:
eglWindowSurface	opengl/GLContext.java	/^    private EGLSurface eglWindowSurface;$/;"	f	class:GLContext	file:
emissiveColor	Material.java	/^	private int emissiveColor 			= 0;$/;"	f	class:Material	file:
equals	vecMath/Vector2.java	/^	public boolean equals(Vector2 v)$/;"	m	class:Vector2
equals	vecMath/Vector3.java	/^	public boolean equals(Vector3 v)$/;"	m	class:Vector3
equals	vecMath/Vector4.java	/^	public boolean equals(Vector4 v)$/;"	m	class:Vector4
far	Camera.java	/^	private float far;$/;"	f	class:Camera	file:
farDistance	Fog.java	/^	private float farDistance 	= 1.0f;$/;"	f	class:Fog	file:
find	Object3D.java	/^	public Object3D find(int userID)$/;"	m	class:Object3D
floatBuffer	VertexArray.java	/^	private FloatBuffer floatBuffer;$/;"	f	class:VertexArray	file:
fog	Appearance.java	/^	private Fog fog;$/;"	f	class:Appearance	file:
format	Image2D.java	/^	private int format;$/;"	f	class:Image2D	file:
fovy	Camera.java	/^	private float fovy;$/;"	f	class:Camera	file:
g	util/Color.java	/^	public float g = 0.0f;$/;"	f	class:Color
gc	opengl/GLContext.java	/^    private Graphics gc;$/;"	f	class:GLContext	file:
get	Transform.java	/^	public void get(float[] matrix) $/;"	m	class:Transform
get	VertexArray.java	/^	public void get(int firstVertex, int numVertices, byte[] values)$/;"	m	class:VertexArray
get	VertexArray.java	/^	public void get(int firstVertex, int numVertices, short[] values)$/;"	m	class:VertexArray
getActiveCamera	World.java	/^	public Camera getActiveCamera()$/;"	m	class:World
getAlphaFactor	Node.java	/^	public float getAlphaFactor()$/;"	m	class:Node
getAlphaThreshold	CompositingMode.java	/^	public float getAlphaThreshold() {$/;"	m	class:CompositingMode
getAppearance	Mesh.java	/^	public Appearance getAppearance(int index)$/;"	m	class:Mesh
getAppearance	Sprite3D.java	/^	public Appearance getAppearance() {$/;"	m	class:Sprite3D
getBackground	World.java	/^	public Background getBackground()$/;"	m	class:World
getBlendColor	Texture2D.java	/^	public int getBlendColor() {$/;"	m	class:Texture2D
getBlending	CompositingMode.java	/^	public int getBlending() {$/;"	m	class:CompositingMode
getBlending	Texture2D.java	/^	public int getBlending() {$/;"	m	class:Texture2D
getBuffer	IndexBuffer.java	/^	IntBuffer getBuffer() {$/;"	m	class:IndexBuffer
getBuffer	VertexArray.java	/^	Buffer getBuffer()$/;"	m	class:VertexArray
getBytesPerPixel	Image2D.java	/^	int getBytesPerPixel() {$/;"	m	class:Image2D
getCamera	Graphics3D.java	/^	public Camera getCamera(Transform transform)$/;"	m	class:Graphics3D
getChild	Group.java	/^	public Node getChild(int index)$/;"	m	class:Group
getChildCount	Group.java	/^	public int getChildCount()$/;"	m	class:Group
getColor	Background.java	/^	public int getColor()$/;"	m	class:Background
getColor	Fog.java	/^	public int getColor() {$/;"	m	class:Fog
getColor	Light.java	/^	public int getColor()$/;"	m	class:Light
getColor	Material.java	/^	public int getColor(int target) {$/;"	m	class:Material
getColors	VertexBuffer.java	/^	public VertexArray getColors()$/;"	m	class:VertexBuffer
getComponentCount	VertexArray.java	/^	public int getComponentCount()$/;"	m	class:VertexArray
getComponentType	VertexArray.java	/^	public int getComponentType()$/;"	m	class:VertexArray
getComponentTypeGL	VertexArray.java	/^	int getComponentTypeGL()$/;"	m	class:VertexArray
getCompositeTransform	Transformable.java	/^	public void getCompositeTransform(Transform transform)$/;"	m	class:Transformable
getCompositingMode	Appearance.java	/^	public CompositingMode getCompositingMode()$/;"	m	class:Appearance
getConstantAttenuation	Light.java	/^	public float getConstantAttenuation()$/;"	m	class:Light
getContext	opengl/GLCanvas.java	/^    public GLContext getContext() {$/;"	m	class:GLCanvas
getCropHeight	Background.java	/^	public int getCropHeight()$/;"	m	class:Background
getCropWidth	Background.java	/^	public int getCropWidth()$/;"	m	class:Background
getCropX	Background.java	/^	public int getCropX()$/;"	m	class:Background
getCropY	Background.java	/^	public int getCropY()$/;"	m	class:Background
getCulling	PolygonMode.java	/^	public int getCulling() {$/;"	m	class:PolygonMode
getDefaultColor	VertexBuffer.java	/^	public int getDefaultColor()$/;"	m	class:VertexBuffer
getDensity	Fog.java	/^	public float getDensity() {$/;"	m	class:Fog
getDepth	Node.java	/^	private int getDepth()$/;"	m	class:Node	file:
getDepthOffsetFactor	CompositingMode.java	/^	public float getDepthOffsetFactor() {$/;"	m	class:CompositingMode
getDepthOffsetUnits	CompositingMode.java	/^	public float getDepthOffsetUnits() {$/;"	m	class:CompositingMode
getFarDistance	Fog.java	/^	public float getFarDistance() {$/;"	m	class:Fog
getFloatBuffer	VertexArray.java	/^	FloatBuffer getFloatBuffer()$/;"	m	class:VertexArray
getFog	Appearance.java	/^	public Fog getFog() {$/;"	m	class:Appearance
getFormat	Image2D.java	/^	public int getFormat() {$/;"	m	class:Image2D
getFreeLightId	Light.java	/^	private void getFreeLightId(GL gl) {$/;"	m	class:Light	file:
getGL	Graphics3D.java	/^	GL getGL()$/;"	m	class:Graphics3D
getGL	Transform.java	/^	void getGL(GL gl, int matrixMode)$/;"	m	class:Transform
getGL	opengl/GLCanvas.java	/^    public GL getGL() {$/;"	m	class:GLCanvas
getGL	opengl/GLContext.java	/^    public GL getGL() {$/;"	m	class:GLContext
getGL	opengl/GLME.java	/^    public GL getGL(){$/;"	m	class:GLME
getGLBlend	Texture2D.java	/^	int getGLBlend()$/;"	m	class:Texture2D
getGLFilter	Texture2D.java	/^	int getGLFilter(int filter)$/;"	m	class:Texture2D
getGLFogMode	Fog.java	/^	int getGLFogMode(int mode)$/;"	m	class:Fog
getGLFormat	Image2D.java	/^	int getGLFormat() {$/;"	m	class:Image2D
getGLU	Graphics3D.java	/^	GLU getGLU()$/;"	m	class:Graphics3D
getGLWrap	Texture2D.java	/^	int getGLWrap(int wrap)$/;"	m	class:Texture2D
getHeight	Image2D.java	/^	public int getHeight() {$/;"	m	class:Image2D
getHeight	opengl/GLCanvas.java	/^    public int getHeight() {$/;"	m	class:GLCanvas
getHints	Graphics3D.java	/^	public int getHints()$/;"	m	class:Graphics3D
getImage	Background.java	/^	public Image2D getImage()$/;"	m	class:Background
getImage	Sprite3D.java	/^	public Image2D getImage() {$/;"	m	class:Sprite3D
getImage	Texture2D.java	/^	public Image2D getImage() {$/;"	m	class:Texture2D
getImageFilter	Texture2D.java	/^	public int getImageFilter() {$/;"	m	class:Texture2D
getImageModeX	Background.java	/^	public int getImageModeX()$/;"	m	class:Background
getImageModeY	Background.java	/^	public int getImageModeY()$/;"	m	class:Background
getIndexBuffer	Mesh.java	/^	public IndexBuffer getIndexBuffer(int index)$/;"	m	class:Mesh
getIndexCount	IndexBuffer.java	/^	public int getIndexCount()$/;"	m	class:IndexBuffer
getIndices	IndexBuffer.java	/^	public abstract void getIndices(int[] indices);$/;"	m	class:IndexBuffer
getIndices	TriangleStripArray.java	/^	public void getIndices(int[] indices)$/;"	m	class:TriangleStripArray
getInstance	Graphics3D.java	/^	public static Graphics3D getInstance()$/;"	m	class:Graphics3D
getInstance	opengl/GLME.java	/^    public static GLME getInstance() {$/;"	m	class:GLME
getIntensity	Light.java	/^	public float getIntensity()$/;"	m	class:Light
getLayer	Appearance.java	/^	public int getLayer() {$/;"	m	class:Appearance
getLevelFilter	Texture2D.java	/^	public int getLevelFilter() {$/;"	m	class:Texture2D
getLight	Graphics3D.java	/^	public Light getLight(int index, Transform transform)$/;"	m	class:Graphics3D
getLightCount	Graphics3D.java	/^	public int getLightCount()$/;"	m	class:Graphics3D
getLightTarget	PolygonMode.java	/^	int getLightTarget()$/;"	m	class:PolygonMode
getLinearAttenuation	Light.java	/^	public float getLinearAttenuation()$/;"	m	class:Light
getMaterial	Appearance.java	/^	public Material getMaterial() {$/;"	m	class:Appearance
getMode	Fog.java	/^	public int getMode() {$/;"	m	class:Fog
getMode	Light.java	/^	public int getMode()$/;"	m	class:Light
getNearDistance	Fog.java	/^	public float getNearDistance() {$/;"	m	class:Fog
getNormals	VertexBuffer.java	/^	public VertexArray getNormals()$/;"	m	class:VertexBuffer
getObject	Loader.java	/^	private static Object getObject(int index)$/;"	m	class:Loader	file:
getOrientation	Transformable.java	/^	public void getOrientation(float[] angleAxis)$/;"	m	class:Transformable
getParent	Node.java	/^	public Node getParent()$/;"	m	class:Node
getPerpendicular	vecMath/Vector3.java	/^	public Vector3 getPerpendicular()$/;"	m	class:Vector3
getPixels	Image2D.java	/^	public ByteBuffer getPixels() {$/;"	m	class:Image2D
getPolygonMode	Appearance.java	/^	public PolygonMode getPolygonMode() {$/;"	m	class:Appearance
getPositions	VertexBuffer.java	/^	public VertexArray getPositions(float[] scaleBias)$/;"	m	class:VertexBuffer
getProjection	Camera.java	/^	public int getProjection(Transform transform) throws ArithmeticException$/;"	m	class:Camera
getProjection	Camera.java	/^	public int getProjection(float[] params) throws IllegalArgumentException$/;"	m	class:Camera
getProjection	vecMath/Vector2.java	/^	public Vector2 getProjection(Vector2 v)$/;"	m	class:Vector2
getProjection	vecMath/Vector3.java	/^	public Vector3 getProjection(Vector3 v)$/;"	m	class:Vector3
getQuadraticAttenuation	Light.java	/^	public float getQuadraticAttenuation()$/;"	m	class:Light
getReferences	Group.java	/^	public int getReferences(Object3D[] references) throws IllegalArgumentException $/;"	m	class:Group
getReferences	Mesh.java	/^	public int getReferences(Object3D[] references) throws IllegalArgumentException $/;"	m	class:Mesh
getReferences	Object3D.java	/^	public int getReferences(Object3D[] references) throws IllegalArgumentException $/;"	m	class:Object3D
getReferences	VertexBuffer.java	/^	public int getReferences(Object3D[] references) throws IllegalArgumentException $/;"	m	class:VertexBuffer
getReferences	World.java	/^	public int getReferences(Object3D[] references) throws IllegalArgumentException $/;"	m	class:World
getReflection	vecMath/Vector2.java	/^	public Vector2 getReflection(Vector2 v)$/;"	m	class:Vector2
getReflection	vecMath/Vector3.java	/^	public Vector3 getReflection(Vector3 v)$/;"	m	class:Vector3
getRejection	vecMath/Vector2.java	/^	public Vector2 getRejection(Vector2 v)$/;"	m	class:Vector2
getRejection	vecMath/Vector3.java	/^	public Vector3 getRejection(Vector3 v)$/;"	m	class:Vector3
getRenderTarget	opengl/GLME.java	/^    public GLCanvas getRenderTarget(Graphics g){$/;"	m	class:GLME
getResource	util/ResourceRetriever.java	/^    public static URL getResource(final String filename) throws IOException {$/;"	m	class:ResourceRetriever
getResourceAsStream	util/ResourceRetriever.java	/^    public static InputStream getResourceAsStream(final String filename) throws IOException {$/;"	m	class:ResourceRetriever
getRotationFromAngleAxis	Transform.java	/^	private Transform getRotationFromAngleAxis(float angle, float ax, float ay, float az)$/;"	m	class:Transform	file:
getRotationFromQuaternion	Transform.java	/^	private Transform getRotationFromQuaternion(float x, float y, float z, float w)$/;"	m	class:Transform	file:
getScale	Transformable.java	/^	public void getScale(float[] xyz)$/;"	m	class:Transformable
getScope	Node.java	/^	public int getScope()$/;"	m	class:Node
getShading	PolygonMode.java	/^	public int getShading() {$/;"	m	class:PolygonMode
getShininess	Material.java	/^	public float getShininess() {$/;"	m	class:Material
getSpotAngle	Light.java	/^	public float getSpotAngle()$/;"	m	class:Light
getSpotExponent	Light.java	/^	public float getSpotExponent()$/;"	m	class:Light
getSubMeshCount	Mesh.java	/^	public int getSubMeshCount()$/;"	m	class:Mesh
getTarget	Graphics3D.java	/^	public Object getTarget()$/;"	m	class:Graphics3D
getTargetHeight	opengl/GLCanvas.java	/^    private native int getTargetHeight(Graphics g2D);$/;"	m	class:GLCanvas	file:
getTargetWidth	opengl/GLCanvas.java	/^    private native int getTargetWidth(Graphics g2D);$/;"	m	class:GLCanvas	file:
getTexCoords	VertexBuffer.java	/^	public VertexArray getTexCoords(int index, float[] scaleBias)$/;"	m	class:VertexBuffer
getTexture	Appearance.java	/^	public Texture2D getTexture(int index)$/;"	m	class:Appearance
getTextureUnitCount	Graphics3D.java	/^	int getTextureUnitCount()$/;"	m	class:Graphics3D
getTransform	Transformable.java	/^	public void getTransform(Transform transform)$/;"	m	class:Transformable
getTransformTo	Node.java	/^	public boolean getTransformTo(Node target, Transform transform)$/;"	m	class:Node
getTranslation	Transformable.java	/^	public void getTranslation(float[] xyz)$/;"	m	class:Transformable
getUserID	Object3D.java	/^	public int getUserID()$/;"	m	class:Object3D
getUserObject	Object3D.java	/^	public Object getUserObject()$/;"	m	class:Object3D
getVertexBuffer	Mesh.java	/^	public VertexBuffer getVertexBuffer()$/;"	m	class:Mesh
getVertexCount	VertexArray.java	/^	public int getVertexCount()$/;"	m	class:VertexArray
getVertexCount	VertexBuffer.java	/^	public int getVertexCount()$/;"	m	class:VertexBuffer
getViewportHeight	Graphics3D.java	/^	public int getViewportHeight()$/;"	m	class:Graphics3D
getViewportWidth	Graphics3D.java	/^	public int getViewportWidth()$/;"	m	class:Graphics3D
getViewportX	Graphics3D.java	/^	public int getViewportX()$/;"	m	class:Graphics3D
getViewportY	Graphics3D.java	/^	public int getViewportY()$/;"	m	class:Graphics3D
getWidth	Image2D.java	/^	public int getWidth() {$/;"	m	class:Image2D
getWidth	opengl/GLCanvas.java	/^    public int getWidth() {$/;"	m	class:GLCanvas
getWinding	PolygonMode.java	/^	public int getWinding() {$/;"	m	class:PolygonMode
getWrappingS	Texture2D.java	/^	public int getWrappingS() {$/;"	m	class:Texture2D
getWrappingT	Texture2D.java	/^	public int getWrappingT() {$/;"	m	class:Texture2D
gl	Graphics3D.java	/^	private GL gl = null;$/;"	f	class:Graphics3D	file:
gl	opengl/GLContext.java	/^    private GL gl;$/;"	f	class:GLContext	file:
glActiveTexture	opengl/GL.java	/^    public void glActiveTexture(int mode) {$/;"	m	class:GL
glAlphaFunc	opengl/GL.java	/^    public void glAlphaFunc(int func, float ref){$/;"	m	class:GL
glBegin	opengl/GL.java	/^    public void glBegin(int mode) {$/;"	m	class:GL
glBlendEquation	opengl/GL.java	/^    public void glBlendEquation(int mode){$/;"	m	class:GL
glBlendFunc	opengl/GL.java	/^    public void glBlendFunc(int sfactor, int dfactor){$/;"	m	class:GL
glClear	opengl/GL.java	/^    public void glClear(int mask) {$/;"	m	class:GL
glClearColor	opengl/GL.java	/^    public void glClearColor(float red, float green, float blue, float alpha){$/;"	m	class:GL
glClientActiveTexture	opengl/GL.java	/^    public void glClientActiveTexture(int mode) {$/;"	m	class:GL
glColorMask	opengl/GL.java	/^    public void glColorMask(boolean red, boolean green, boolean blue, boolean alpha){$/;"	m	class:GL
glColorPointer	opengl/GL.java	/^    public void glColorPointer(int size, int type, int stride, Buffer ptr) {$/;"	m	class:GL
glContext	opengl/GLCanvas.java	/^    private GLContext glContext;$/;"	f	class:GLCanvas	file:
glDepthFunc	opengl/GL.java	/^    public void glDepthFunc(int func){$/;"	m	class:GL
glDepthMask	opengl/GL.java	/^    public void glDepthMask(boolean flag){$/;"	m	class:GL
glDisable	opengl/GL.java	/^    public void glDisable(int cap) {$/;"	m	class:GL
glDisableClientState	opengl/GL.java	/^    public void glDisableClientState(int cap) {$/;"	m	class:GL
glDrawElements	opengl/GL.java	/^    public void glDrawElements(int mode, int count, int type, Buffer indices) {$/;"	m	class:GL
glEnable	opengl/GL.java	/^    public void glEnable(int cap) {$/;"	m	class:GL
glEnableClientState	opengl/GL.java	/^    public void glEnableClientState(int cap){$/;"	m	class:GL
glEnd	opengl/GL.java	/^    public void glEnd(){$/;"	m	class:GL
glLoadIdentity	opengl/GL.java	/^    public void glLoadIdentity( ) {$/;"	m	class:GL
glMatrixMode	opengl/GL.java	/^    public void glMatrixMode(int mode) {$/;"	m	class:GL
glNormalPointer	opengl/GL.java	/^    public void glNormalPointer(int type, int stride, Buffer ptr) {$/;"	m	class:GL
glPopMatrix	opengl/GL.java	/^    public void glPopMatrix() {$/;"	m	class:GL
glPushMatrix	opengl/GL.java	/^    public void glPushMatrix() {$/;"	m	class:GL
glScalef	opengl/GL.java	/^    public void glScalef(float x, float y, float z) {$/;"	m	class:GL
glTexCoord2f	opengl/GL.java	/^    public void glTexCoord2f(float s, float t){$/;"	m	class:GL
glTexCoordPointer	opengl/GL.java	/^    public void glTexCoordPointer(int size, int type, int stride, Buffer ptr){$/;"	m	class:GL
glTranslatef	opengl/GL.java	/^    public void glTranslatef(float x, float y, float z) {$/;"	m	class:GL
glVertex3f	opengl/GL.java	/^    public void glVertex3f(float x, float y){$/;"	m	class:GL
glVertexPointer	opengl/GL.java	/^    public void glVertexPointer(int size, int type, int stride, Buffer ptr){$/;"	m	class:GL
glViewport	opengl/GL.java	/^    public void glViewport(int x, int y, int width, int height) {$/;"	m	class:GL
glu	Graphics3D.java	/^	private GLU glu = null;$/;"	f	class:Graphics3D	file:
graphics2D	opengl/GLCanvas.java	/^    private Graphics graphics2D;$/;"	f	class:GLCanvas	file:
height	Image2D.java	/^	private int height;$/;"	f	class:Image2D	file:
id	Texture2D.java	/^	int[] id = {0};$/;"	f	class:Texture2D
image	Sprite3D.java	/^	private Image2D image;$/;"	f	class:Sprite3D	file:
image	Texture2D.java	/^	private Image2D image;$/;"	f	class:Texture2D	file:
imageFilter	Texture2D.java	/^	private int imageFilter = FILTER_NEAREST;$/;"	f	class:Texture2D	file:
in	Loader.java	/^	private static DataInputStream in;$/;"	f	class:Loader	file:
init	opengl/GLContext.java	/^    public void init() {$/;"	m	class:GLContext
instance	Graphics3D.java	/^	private static Graphics3D instance = null;$/;"	f	class:Graphics3D	file:
instance	opengl/GLME.java	/^    private static GLME instance;$/;"	f	class:GLME	file:
intToFloatArray	util/Color.java	/^	public static float[] intToFloatArray(int color)$/;"	m	class:Color
intensity	Light.java	/^	private float intensity 			= 1.0f;$/;"	f	class:Light	file:
invert	Transform.java	/^	public void invert()$/;"	m	class:Transform
isAlphaWriteEnabled	CompositingMode.java	/^	public boolean isAlphaWriteEnabled() {$/;"	m	class:CompositingMode
isAnyArraySet	VertexBuffer.java	/^	private boolean isAnyArraySet()$/;"	m	class:VertexBuffer	file:
isColorClearEnabled	Background.java	/^	public boolean isColorClearEnabled()$/;"	m	class:Background
isColorWriteEnabled	CompositingMode.java	/^	public boolean isColorWriteEnabled() {$/;"	m	class:CompositingMode
isDepthBufferEnabled	Graphics3D.java	/^	public boolean isDepthBufferEnabled()$/;"	m	class:Graphics3D
isDepthClearEnabled	Background.java	/^	public boolean isDepthClearEnabled()$/;"	m	class:Background
isDepthTestEnabled	CompositingMode.java	/^	public boolean isDepthTestEnabled() {$/;"	m	class:CompositingMode
isDepthWriteEnabled	CompositingMode.java	/^	public boolean isDepthWriteEnabled() {$/;"	m	class:CompositingMode
isLocalCameraLightingEnabled	PolygonMode.java	/^	public boolean isLocalCameraLightingEnabled() {$/;"	m	class:PolygonMode
isMutable	Image2D.java	/^	private boolean isMutable;$/;"	f	class:Image2D	file:
isMutable	Image2D.java	/^	public boolean isMutable() {$/;"	m	class:Image2D
isPerspectiveCorrectionEnabled	PolygonMode.java	/^	public boolean isPerspectiveCorrectionEnabled() {$/;"	m	class:PolygonMode
isPickingEnabled	Node.java	/^	public boolean isPickingEnabled()$/;"	m	class:Node
isRenderingEnabled	Node.java	/^	public boolean isRenderingEnabled()$/;"	m	class:Node
isScaled	Sprite3D.java	/^	public boolean isScaled() {$/;"	m	class:Sprite3D
isTwoSidedLightingEnabled	PolygonMode.java	/^	public boolean isTwoSidedLightingEnabled() {$/;"	m	class:PolygonMode
isVertexColorTrackingEnabled	Material.java	/^	private boolean isVertexColorTrackingEnabled = false;$/;"	f	class:Material	file:
isVertexColorTrackingEnabled	Material.java	/^	public boolean isVertexColorTrackingEnabled() {$/;"	m	class:Material
javax.microedition.m3g	Appearance.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Background.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Camera.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	CompositingMode.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Fog.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Graphics3D.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Group.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Image2D.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	IndexBuffer.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Light.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Loader.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Material.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Mesh.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Node.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Object3D.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	PolygonMode.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	RenderEventListener.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Sprite3D.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Texture2D.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Transform.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	Transformable.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	TriangleStripArray.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	VertexArray.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	VertexBuffer.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g	World.java	/^package javax.microedition.m3g;$/;"	p
javax.microedition.m3g.opengl	opengl/GLCanvas.java	/^package javax.microedition.m3g.opengl;$/;"	p
javax.microedition.m3g.opengl	opengl/GLContext.java	/^package javax.microedition.m3g.opengl;$/;"	p
javax.microedition.m3g.opengl	opengl/GLME.java	/^package javax.microedition.m3g.opengl;$/;"	p
javax.microedition.m3g.util	util/BufferUtil.java	/^package javax.microedition.m3g.util;$/;"	p
javax.microedition.m3g.util	util/Reflection.java	/^package javax.microedition.m3g.util;$/;"	p
javax.microedition.m3g.util	util/ResourceRetriever.java	/^package javax.microedition.m3g.util;$/;"	p
javax.microedition.m3g.vecMath	vecMath/Constants.java	/^package javax.microedition.m3g.vecMath;$/;"	p
javax.microedition.m3g.vecMath	vecMath/Vector2.java	/^package javax.microedition.m3g.vecMath;$/;"	p
javax.microedition.m3g.vecMath	vecMath/Vector3.java	/^package javax.microedition.m3g.vecMath;$/;"	p
javax.microedition.m3g.vecMath	vecMath/Vector4.java	/^package javax.microedition.m3g.vecMath;$/;"	p
javax.microedtion.m3g.util	util/Color.java	/^package javax.microedtion.m3g.util;$/;"	p
jsr239_gl	opengl/GL.java	/^    private javax.microedition.khronos.opengles.GL10 jsr239_gl;$/;"	f	class:GL	file:
jsr239_gl	opengl/GLContext.java	/^    private GL10 jsr239_gl;$/;"	f	class:GLContext	file:
layer	Appearance.java	/^	private int layer = 0;$/;"	f	class:Appearance	file:
length	vecMath/Vector2.java	/^	public float length()$/;"	m	class:Vector2
length	vecMath/Vector3.java	/^	public float length()$/;"	m	class:Vector3
length	vecMath/Vector4.java	/^	public float length()$/;"	m	class:Vector4
length2	vecMath/Vector2.java	/^	public float length2()$/;"	m	class:Vector2
length2	vecMath/Vector3.java	/^	public float length2()$/;"	m	class:Vector3
length2	vecMath/Vector4.java	/^	public float length2()$/;"	m	class:Vector4
levelFilter	Texture2D.java	/^	private int levelFilter = FILTER_BASE_LEVEL;$/;"	f	class:Texture2D	file:
lightId	Light.java	/^	private int lightId = -1;$/;"	f	class:Light	file:
lights	Graphics3D.java	/^	private ArrayList lights = new ArrayList();$/;"	f	class:Graphics3D	file:
load	Loader.java	/^	public static Object3D[] load(String name)$/;"	m	class:Loader
load	Loader.java	/^	public static Object3D[] load(byte[] data, int offset)$/;"	m	class:Loader
loadFromImage	Image2D.java	/^	private void loadFromImage(Image image)$/;"	m	class:Image2D	file:
loadGroup	Loader.java	/^	private static void loadGroup(Group group) throws IOException$/;"	m	class:Loader	file:
loadNode	Loader.java	/^	private static void loadNode(Node node) throws IOException$/;"	m	class:Loader	file:
loadObject3D	Loader.java	/^	private static void loadObject3D(Object3D object) throws IOException$/;"	m	class:Loader	file:
loadTransformable	Loader.java	/^	private static void loadTransformable(Transformable transformable) throws IOException$/;"	m	class:Loader	file:
localCameraLightingEnabled	PolygonMode.java	/^	private boolean localCameraLightingEnabled	 = false;$/;"	f	class:PolygonMode	file:
m	Transform.java	/^	protected float[] m =  {1,0,0,0,$/;"	f	class:Transform
makeCurrent	opengl/GLContext.java	/^    public void makeCurrent() {$/;"	m	class:GLContext
material	Appearance.java	/^	private Material material;$/;"	f	class:Appearance	file:
maxTextureUnitIndex	VertexBuffer.java	/^	private int maxTextureUnitIndex = 0;$/;"	f	class:VertexBuffer	file:
mode	Fog.java	/^	private int mode 			= LINEAR;$/;"	f	class:Fog	file:
mode	Light.java	/^	private int mode 					= DIRECTIONAL;$/;"	f	class:Light	file:
multGL	Transform.java	/^	void multGL(GL gl)$/;"	m	class:Transform
multiply	vecMath/Vector2.java	/^	public void multiply(Vector2 v, float scalar)$/;"	m	class:Vector2
multiply	vecMath/Vector2.java	/^	public void multiply(float scalar)$/;"	m	class:Vector2
multiply	vecMath/Vector3.java	/^	public void multiply(Vector3 v, float scalar)$/;"	m	class:Vector3
multiply	vecMath/Vector3.java	/^	public void multiply(float scalar)$/;"	m	class:Vector3
multiply	vecMath/Vector4.java	/^	public void multiply(Vector4 v, float scalar)$/;"	m	class:Vector4
multiply	vecMath/Vector4.java	/^	public void multiply(float scalar)$/;"	m	class:Vector4
near	Camera.java	/^	private float near;$/;"	f	class:Camera	file:
nearDistance	Fog.java	/^	private float nearDistance 	= 0.0f;$/;"	f	class:Fog	file:
newByteBuffer	util/BufferUtil.java	/^    public static ByteBuffer newByteBuffer(int capacity){$/;"	m	class:BufferUtil
newFloatBuffer	util/BufferUtil.java	/^    public static FloatBuffer newFloatBuffer(int capacity){$/;"	m	class:BufferUtil
newIntBuffer	util/BufferUtil.java	/^    public static IntBuffer newIntBuffer(int numelements) {$/;"	m	class:BufferUtil
newShortBuffer	util/BufferUtil.java	/^    public static ShortBuffer newShortBuffer(int capacity){$/;"	m	class:BufferUtil
normalize	vecMath/Vector2.java	/^	public void normalize()$/;"	m	class:Vector2
normalize	vecMath/Vector3.java	/^	public void normalize()$/;"	m	class:Vector3
normalize	vecMath/Vector4.java	/^	public void normalize()$/;"	m	class:Vector4
normals	VertexBuffer.java	/^	private VertexArray normals = null;$/;"	f	class:VertexBuffer	file:
numComponents	VertexArray.java	/^	private int numComponents;$/;"	f	class:VertexArray	file:
numElements	VertexArray.java	/^	private int numElements;$/;"	f	class:VertexArray	file:
numTextureUnits	Appearance.java	/^	int numTextureUnits = 8; \/\/ TODO: get from caps$/;"	f	class:Appearance
numTextureUnits	Graphics3D.java	/^	private int numTextureUnits = 8; \/\/ TODO: get from caps$/;"	f	class:Graphics3D	file:
numVertices	VertexArray.java	/^	private int numVertices;$/;"	f	class:VertexArray	file:
numVertices	VertexBuffer.java	/^	private int numVertices = 0;$/;"	f	class:VertexBuffer	file:
objects	Loader.java	/^	private static ArrayList objects;$/;"	f	class:Loader	file:
orientation	Transformable.java	/^	private Transform orientation = new Transform(); $/;"	f	class:Transformable	file:
parent	Node.java	/^	protected Node parent 				= null;$/;"	f	class:Node
perspectiveCorrectionEnabled	PolygonMode.java	/^	private boolean perspectiveCorrectionEnabled = true;$/;"	f	class:PolygonMode	file:
pickingEnabled	Node.java	/^	protected boolean pickingEnabled 	= true;$/;"	f	class:Node
pixels	Image2D.java	/^	private ByteBuffer pixels;$/;"	f	class:Image2D	file:
polygonMode	Appearance.java	/^	private PolygonMode polygonMode;$/;"	f	class:Appearance	file:
populateLights	Graphics3D.java	/^	private void populateLights(World world, Object3D obj)$/;"	m	class:Graphics3D	file:
positionBias	VertexBuffer.java	/^	private float[] positionBias = null;$/;"	f	class:VertexBuffer	file:
positionScale	VertexBuffer.java	/^	private float positionScale = 1.0f;$/;"	f	class:VertexBuffer	file:
positions	VertexBuffer.java	/^	private VertexArray positions = null;$/;"	f	class:VertexBuffer	file:
postMultiply	Transform.java	/^	public void postMultiply(Transform transform)$/;"	m	class:Transform
postRotate	Transform.java	/^	public void postRotate(float angle, float ax, float ay, float az)$/;"	m	class:Transform
postRotate	Transformable.java	/^	public void postRotate(float angle, float ax, float ay, float az)$/;"	m	class:Transformable
postRotateQuat	Transform.java	/^	public void postRotateQuat(float qx, float qy, float qz, float qw)$/;"	m	class:Transform
postScale	Transform.java	/^	public void postScale(float sx, float sy, float sz)$/;"	m	class:Transform
postTranslate	Transform.java	/^	public void postTranslate(float tx, float ty, float tz)$/;"	m	class:Transform
preRotate	Transformable.java	/^	public void preRotate(float angle, float ax, float ay, float az)$/;"	m	class:Transformable
projectionType	Camera.java	/^	private int projectionType = GENERIC;$/;"	f	class:Camera	file:
r	util/Color.java	/^	public float r = 0.0f;$/;"	f	class:Color
readBoolean	Loader.java	/^	private static boolean readBoolean() throws IOException$/;"	m	class:Loader	file:
readByte	Loader.java	/^	private static int readByte() throws IOException$/;"	m	class:Loader	file:
readFloat	Loader.java	/^	private static float readFloat() throws IOException$/;"	m	class:Loader	file:
readInt	Loader.java	/^	private static int readInt() throws IOException$/;"	m	class:Loader	file:
readMatrix	Loader.java	/^	private static float[] readMatrix() throws IOException$/;"	m	class:Loader	file:
readRGB	Loader.java	/^	private static int readRGB() throws IOException$/;"	m	class:Loader	file:
readRGBA	Loader.java	/^	private static int readRGBA() throws IOException$/;"	m	class:Loader	file:
readShort	Loader.java	/^	private static int readShort() throws IOException$/;"	m	class:Loader	file:
readString	Loader.java	/^	private static String readString() throws IOException$/;"	m	class:Loader	file:
release	opengl/GLContext.java	/^    public void release() {$/;"	m	class:GLContext
releaseTarget	Graphics3D.java	/^	public void releaseTarget()$/;"	m	class:Graphics3D
removeChild	Group.java	/^	public void removeChild(Node child)$/;"	m	class:Group
removeGLEventListener	opengl/GLCanvas.java	/^    public void removeGLEventListener(RenderEventListener listener){$/;"	m	class:GLCanvas
render	Graphics3D.java	/^	public void render(Node node, Transform transform)$/;"	m	class:Graphics3D
render	Graphics3D.java	/^	public void render(VertexBuffer vertices, IndexBuffer triangles, Appearance appearance, Transform transform)$/;"	m	class:Graphics3D
render	Graphics3D.java	/^	public void render(VertexBuffer vertices, IndexBuffer triangles, Appearance appearance, Transform transform, int scope)$/;"	m	class:Graphics3D
render	Graphics3D.java	/^	public void render(World world)$/;"	m	class:Graphics3D
render	Sprite3D.java	/^	void render(GL gl, Transform t)$/;"	m	class:Sprite3D
renderDescendants	Graphics3D.java	/^	private void renderDescendants(World world, Object3D obj)$/;"	m	class:Graphics3D	file:
renderListeners	opengl/GLCanvas.java	/^    private Vector renderListeners;$/;"	f	class:GLCanvas	file:
renderTarget	Graphics3D.java	/^	private Object renderTarget;$/;"	f	class:Graphics3D	file:
renderingEnabled	Node.java	/^	protected boolean renderingEnabled 	= true;$/;"	f	class:Node
resetLights	Graphics3D.java	/^	public void resetLights()$/;"	m	class:Graphics3D
resetVertexCount	VertexBuffer.java	/^	private void resetVertexCount()$/;"	m	class:VertexBuffer	file:
rotate	vecMath/Vector3.java	/^	public void rotate(float angle, Vector3 axis)$/;"	m	class:Vector3
scale	Transformable.java	/^	private Vector3 scale = new Vector3(1,1,1);$/;"	f	class:Transformable	file:
scale	Transformable.java	/^	public void scale(float sx, float sy, float sz)$/;"	m	class:Transformable
scaled	Sprite3D.java	/^	private boolean scaled = false;$/;"	f	class:Sprite3D	file:
scope	Node.java	/^	protected int scope 				= -1;$/;"	f	class:Node
set	Image2D.java	/^	public void set(int x, int y, int width, int height, byte[] image)$/;"	m	class:Image2D
set	Transform.java	/^	public void set(Transform transform)$/;"	m	class:Transform
set	Transform.java	/^	public void set(float[] matrix)$/;"	m	class:Transform
set	VertexArray.java	/^	public void set(int firstVertex, int numVertices, byte[] values)$/;"	m	class:VertexArray
set	VertexArray.java	/^	public void set(int firstVertex, int numVertices, short[] values)$/;"	m	class:VertexArray
set	vecMath/Vector2.java	/^	public void set(Vector2 v)$/;"	m	class:Vector2
set	vecMath/Vector2.java	/^	public void set(float x, float y)$/;"	m	class:Vector2
set	vecMath/Vector2.java	/^	public void set(float[] v)$/;"	m	class:Vector2
set	vecMath/Vector3.java	/^	public void set(Vector3 v)$/;"	m	class:Vector3
set	vecMath/Vector3.java	/^	public void set(float x, float y, float z)$/;"	m	class:Vector3
set	vecMath/Vector3.java	/^	public void set(float[] v)$/;"	m	class:Vector3
set	vecMath/Vector4.java	/^	public void set(Vector4 v)$/;"	m	class:Vector4
set	vecMath/Vector4.java	/^	public void set(float x, float y, float z, float w)$/;"	m	class:Vector4
set	vecMath/Vector4.java	/^	public void set(float[] v)$/;"	m	class:Vector4
setActiveCamera	World.java	/^	public void setActiveCamera(Camera camera)$/;"	m	class:World
setAlignment	Node.java	/^	public void setAlignment(Node zRef, int zTarget, Node yRef, int yTarget)$/;"	m	class:Node
setAlphaFactor	Node.java	/^	public void setAlphaFactor(float alphaFactor)$/;"	m	class:Node
setAlphaThreshold	CompositingMode.java	/^	public void setAlphaThreshold(float alphaThreshold) {$/;"	m	class:CompositingMode
setAlphaWriteEnabled	CompositingMode.java	/^	public void setAlphaWriteEnabled(boolean alphaWriteEnabled) {$/;"	m	class:CompositingMode
setAppearance	Graphics3D.java	/^	void setAppearance(Appearance appearance)$/;"	m	class:Graphics3D
setAppearance	Mesh.java	/^	public void setAppearance(int index, Appearance appearance)$/;"	m	class:Mesh
setAppearance	Sprite3D.java	/^	public void setAppearance(Appearance appearance) {$/;"	m	class:Sprite3D
setAttenuation	Light.java	/^	public void setAttenuation(float constant, float linear, float quadratic)$/;"	m	class:Light
setBackground	World.java	/^	public void setBackground(Background background)$/;"	m	class:World
setBlendColor	Texture2D.java	/^	public void setBlendColor(int blendColor) {$/;"	m	class:Texture2D
setBlending	CompositingMode.java	/^	public void setBlending(int blending) {$/;"	m	class:CompositingMode
setBlending	Texture2D.java	/^	public void setBlending(int blending) {$/;"	m	class:Texture2D
setCamera	Graphics3D.java	/^	public void setCamera(Camera camera, Transform transform)$/;"	m	class:Graphics3D
setColor	Background.java	/^	public void setColor(int color)$/;"	m	class:Background
setColor	Fog.java	/^	public void setColor(int color) {$/;"	m	class:Fog
setColor	Light.java	/^	public void setColor(int color)$/;"	m	class:Light
setColor	Material.java	/^	public void setColor(int target, int color) {$/;"	m	class:Material
setColorClearEnable	Background.java	/^	public void setColorClearEnable(boolean enable)$/;"	m	class:Background
setColorWriteEnabled	CompositingMode.java	/^	public void setColorWriteEnabled(boolean colorWriteEnabled) {$/;"	m	class:CompositingMode
setColors	VertexBuffer.java	/^	public void setColors(VertexArray colors)$/;"	m	class:VertexBuffer
setCompositingMode	Appearance.java	/^	public void setCompositingMode(CompositingMode compositingMode)$/;"	m	class:Appearance
setCrop	Background.java	/^	public void setCrop(int x, int y, int width, int height)$/;"	m	class:Background
setCulling	PolygonMode.java	/^	public void setCulling(int culling) {$/;"	m	class:PolygonMode
setDefaultColor	VertexBuffer.java	/^	public void setDefaultColor(int color)$/;"	m	class:VertexBuffer
setDensity	Fog.java	/^	public void setDensity(float density) {$/;"	m	class:Fog
setDepthClearEnable	Background.java	/^	public void setDepthClearEnable(boolean enable)$/;"	m	class:Background
setDepthOffsetFactor	CompositingMode.java	/^	public void setDepthOffsetFactor(float depthOffsetFactor) {$/;"	m	class:CompositingMode
setDepthOffsetUnits	CompositingMode.java	/^	public void setDepthOffsetUnits(float depthOffsetUnits) {$/;"	m	class:CompositingMode
setDepthRange	Graphics3D.java	/^	public void setDepthRange(float near, float far)$/;"	m	class:Graphics3D
setDepthTestEnabled	CompositingMode.java	/^	public void setDepthTestEnabled(boolean depthTestEnabled) {$/;"	m	class:CompositingMode
setDepthWriteEnabled	CompositingMode.java	/^	public void setDepthWriteEnabled(boolean depthWriteEnabled) {$/;"	m	class:CompositingMode
setFarDistance	Fog.java	/^	public void setFarDistance(float farDistance) {$/;"	m	class:Fog
setFiltering	Texture2D.java	/^	public void setFiltering(int levelFilter, int imageFilter) {$/;"	m	class:Texture2D
setFog	Appearance.java	/^	public void setFog(Fog fog) {$/;"	m	class:Appearance
setGL	Graphics3D.java	/^	void setGL(GL gl)$/;"	m	class:Graphics3D
setGL	Transform.java	/^	void setGL(GL gl)$/;"	m	class:Transform
setGeneric	Camera.java	/^	public void setGeneric(Transform transform)$/;"	m	class:Camera
setHeight	Image2D.java	/^	public void setHeight(int height) {$/;"	m	class:Image2D
setIdentity	Transform.java	/^	public void setIdentity()$/;"	m	class:Transform
setImage	Background.java	/^	public void setImage(Image2D image)$/;"	m	class:Background
setImage	Sprite3D.java	/^	public void setImage(Image2D image) {$/;"	m	class:Sprite3D
setImage	Texture2D.java	/^	public void setImage(Image2D image) {$/;"	m	class:Texture2D
setImageMode	Background.java	/^	public void setImageMode(int modeX, int modeY)$/;"	m	class:Background
setIntensity	Light.java	/^	public void setIntensity(float intensity)$/;"	m	class:Light
setLayer	Appearance.java	/^	public void setLayer(int layer) {$/;"	m	class:Appearance
setLight	Graphics3D.java	/^	public void setLight(int index, Light light, Transform transform)$/;"	m	class:Graphics3D
setLinear	Fog.java	/^	public void setLinear(float near, float far)$/;"	m	class:Fog
setLocalCameraLightingEnabled	PolygonMode.java	/^	public void setLocalCameraLightingEnabled(boolean localCameraLightingEnabled) {$/;"	m	class:PolygonMode
setMaterial	Appearance.java	/^	public void setMaterial(Material material) {$/;"	m	class:Appearance
setMode	Fog.java	/^	public void setMode(int mode) {$/;"	m	class:Fog
setMode	Light.java	/^	public void setMode(int mode)$/;"	m	class:Light
setNearDistance	Fog.java	/^	public void setNearDistance(float nearDistance) {$/;"	m	class:Fog
setNormals	VertexBuffer.java	/^	public void setNormals(VertexArray normals)$/;"	m	class:VertexBuffer
setOrientation	Transformable.java	/^	public void setOrientation(float angle, float ax, float ay, float az)$/;"	m	class:Transformable
setParallel	Camera.java	/^	public void setParallel(float fovy, float aspectRatio, float near, float far)$/;"	m	class:Camera
setPerspective	Camera.java	/^	public void setPerspective(float fovy, float aspectRatio, float near, float far)$/;"	m	class:Camera
setPerspectiveCorrectionEnabled	PolygonMode.java	/^	public void setPerspectiveCorrectionEnabled(boolean perspectiveCorrectionEnabled) {$/;"	m	class:PolygonMode
setPickingEnable	Node.java	/^	public void setPickingEnable(boolean enable)$/;"	m	class:Node
setPolygonMode	Appearance.java	/^	public void setPolygonMode(PolygonMode polygonMode) {$/;"	m	class:Appearance
setPositions	VertexBuffer.java	/^	public void setPositions(VertexArray positions, float scale, float[] bias)$/;"	m	class:VertexBuffer
setRenderingEnable	Node.java	/^	public void setRenderingEnable(boolean enable)$/;"	m	class:Node
setScale	Transformable.java	/^	public void setScale(float sx, float sy, float sz)$/;"	m	class:Transformable
setScope	Node.java	/^	public void setScope(int scope)$/;"	m	class:Node
setShading	PolygonMode.java	/^	public void setShading(int shading) {$/;"	m	class:PolygonMode
setShininess	Material.java	/^	public void setShininess(float shininess) {$/;"	m	class:Material
setSpotAngle	Light.java	/^	public void setSpotAngle(float angle)$/;"	m	class:Light
setSpotExponent	Light.java	/^	public void setSpotExponent(float exponent)$/;"	m	class:Light
setTexCoords	VertexBuffer.java	/^	public void setTexCoords(int index, VertexArray texCoords, float scale, float[] bias)$/;"	m	class:VertexBuffer
setTexture	Appearance.java	/^	public void setTexture(int index, Texture2D texture)$/;"	m	class:Appearance
setTransform	Transformable.java	/^	public void setTransform(Transform transform)$/;"	m	class:Transformable
setTranslation	Transformable.java	/^	public void setTranslation(float tx, float ty, float tz)$/;"	m	class:Transformable
setTwoSidedLightingEnabled	PolygonMode.java	/^	public void setTwoSidedLightingEnabled(boolean twoSidedLightingEnabled) {$/;"	m	class:PolygonMode
setUserID	Object3D.java	/^	public void setUserID(int userID)$/;"	m	class:Object3D
setUserObject	Object3D.java	/^	public void setUserObject(Object userObject)$/;"	m	class:Object3D
setVertexColorTrackingEnabled	Material.java	/^	public void setVertexColorTrackingEnabled(boolean isVertexColorTrackingEnabled) {$/;"	m	class:Material
setViewport	Graphics3D.java	/^	public void setViewport(int x, int y, int width, int height)$/;"	m	class:Graphics3D
setWidth	Image2D.java	/^	public void setWidth(int width) {$/;"	m	class:Image2D
setWinding	PolygonMode.java	/^	public void setWinding(int winding) {$/;"	m	class:PolygonMode
setWrapping	Texture2D.java	/^	public void setWrapping(int wrappingS, int wrappingT) {$/;"	m	class:Texture2D
setupGL	Background.java	/^	void setupGL(GL gl)$/;"	m	class:Background
setupGL	CompositingMode.java	/^	void setupGL(GL gl)$/;"	m	class:CompositingMode
setupGL	Fog.java	/^	void setupGL(GL gl)$/;"	m	class:Fog
setupGL	Light.java	/^	void setupGL(GL gl)$/;"	m	class:Light
setupGL	Material.java	/^	void setupGL(GL gl, int lightTarget)$/;"	m	class:Material
setupGL	PolygonMode.java	/^	void setupGL(GL gl)$/;"	m	class:PolygonMode
setupGL	Texture2D.java	/^	void setupGL(GL gl, float[] scaleBias)$/;"	m	class:Texture2D
shading	PolygonMode.java	/^	private int shading = SHADE_SMOOTH; $/;"	f	class:PolygonMode	file:
shininess	Material.java	/^	private float shininess 			= 10.0f;$/;"	f	class:Material	file:
specularColor	Material.java	/^	private int specularColor 			= 0;$/;"	f	class:Material	file:
spotAngle	Light.java	/^	private float spotAngle 			= 45.0f;$/;"	f	class:Light	file:
spotExponent	Light.java	/^	private float spotExponent 			= 0.0f;$/;"	f	class:Light	file:
submeshes	Mesh.java	/^	private ArrayList submeshes = new ArrayList();$/;"	f	class:Mesh	file:
subtract	vecMath/Vector2.java	/^	public void subtract(Vector2 v)$/;"	m	class:Vector2
subtract	vecMath/Vector2.java	/^	public void subtract(Vector2 v,  float scalar)$/;"	m	class:Vector2
subtract	vecMath/Vector2.java	/^	public void subtract(Vector2 v1, Vector2 v2)$/;"	m	class:Vector2
subtract	vecMath/Vector2.java	/^	public void subtract(float scalar)$/;"	m	class:Vector2
subtract	vecMath/Vector3.java	/^	public void subtract(Vector3 v)$/;"	m	class:Vector3
subtract	vecMath/Vector3.java	/^	public void subtract(Vector3 v,  float scalar)$/;"	m	class:Vector3
subtract	vecMath/Vector3.java	/^	public void subtract(Vector3 v1, Vector3 v2)$/;"	m	class:Vector3
subtract	vecMath/Vector3.java	/^	public void subtract(float scalar)$/;"	m	class:Vector3
subtract	vecMath/Vector4.java	/^	public void subtract(Vector4 v)$/;"	m	class:Vector4
subtract	vecMath/Vector4.java	/^	public void subtract(Vector4 v,  float scalar)$/;"	m	class:Vector4
subtract	vecMath/Vector4.java	/^	public void subtract(Vector4 v1, Vector4 v2)$/;"	m	class:Vector4
subtract	vecMath/Vector4.java	/^	public void subtract(float scalar)$/;"	m	class:Vector4
swapBuffers	opengl/GLContext.java	/^    public void swapBuffers() {$/;"	m	class:GLContext
texCoords	VertexBuffer.java	/^	private VertexArray[] texCoords = null;$/;"	f	class:VertexBuffer	file:
texCoordsBias	VertexBuffer.java	/^	private float[][] texCoordsBias = null;$/;"	f	class:VertexBuffer	file:
texCoordsScale	VertexBuffer.java	/^	private float[] texCoordsScale = {1,1,1};$/;"	f	class:VertexBuffer	file:
texture	Sprite3D.java	/^	private Texture2D texture;$/;"	f	class:Sprite3D	file:
textures	Appearance.java	/^	private Texture2D[] textures;$/;"	f	class:Appearance	file:
textures	Sprite3D.java	/^	private static Hashtable textures = new Hashtable();$/;"	f	class:Sprite3D	file:
toArray	util/Color.java	/^	public float[] toArray()$/;"	m	class:Color
toArray	vecMath/Vector2.java	/^	public float[] toArray()$/;"	m	class:Vector2
toArray	vecMath/Vector3.java	/^	public float[] toArray()$/;"	m	class:Vector3
toArray	vecMath/Vector4.java	/^	public float[] toArray()$/;"	m	class:Vector4
toString	Transform.java	/^	public String toString()$/;"	m	class:Transform
toString	util/Color.java	/^	public String toString()$/;"	m	class:Color
toString	vecMath/Vector2.java	/^	public String toString()$/;"	m	class:Vector2
toString	vecMath/Vector3.java	/^	public String toString()$/;"	m	class:Vector3
toString	vecMath/Vector4.java	/^	public String toString()$/;"	m	class:Vector4
transform	Camera.java	/^	private Transform transform = new Transform();$/;"	f	class:Camera	file:
transform	Transform.java	/^	public void transform(VertexArray in, float[] out, boolean W)$/;"	m	class:Transform
transform	Transform.java	/^	public void transform(float[] vectors)$/;"	m	class:Transform
transform	Transformable.java	/^	private Transform transform = new Transform();$/;"	f	class:Transformable	file:
translate	Transformable.java	/^	public void translate(float tx, float ty, float tz)$/;"	m	class:Transformable
translation	Transformable.java	/^	private Vector3 translation = new Vector3();$/;"	f	class:Transformable	file:
transpose	Transform.java	/^	public void transpose()$/;"	m	class:Transform
twoSidedLightingEnabled	PolygonMode.java	/^	private boolean twoSidedLightingEnabled 	 = false;$/;"	f	class:PolygonMode	file:
userID	Object3D.java	/^	protected int userID = 0;$/;"	f	class:Object3D
userObject	Object3D.java	/^	protected Object userObject = null;$/;"	f	class:Object3D
vertices	Mesh.java	/^	private VertexBuffer vertices;$/;"	f	class:Mesh	file:
viewportHeight	Graphics3D.java	/^	private int viewportHeight = 0;$/;"	f	class:Graphics3D	file:
viewportWidth	Graphics3D.java	/^	private int viewportWidth = 0;$/;"	f	class:Graphics3D	file:
viewportX	Graphics3D.java	/^	private int viewportX = 0;$/;"	f	class:Graphics3D	file:
viewportY	Graphics3D.java	/^	private int viewportY = 0;$/;"	f	class:Graphics3D	file:
w	vecMath/Vector4.java	/^	public float x, y, z, w;$/;"	f	class:Vector4
width	Image2D.java	/^	private int width;$/;"	f	class:Image2D	file:
winding	PolygonMode.java	/^	private int winding = WINDING_CCW;$/;"	f	class:PolygonMode	file:
wrappingS	Texture2D.java	/^	private int wrappingS = WRAP_REPEAT;$/;"	f	class:Texture2D	file:
wrappingT	Texture2D.java	/^	private int wrappingT = WRAP_REPEAT;$/;"	f	class:Texture2D	file:
x	vecMath/Vector2.java	/^	public float x, y;$/;"	f	class:Vector2
x	vecMath/Vector3.java	/^	public float x, y, z;$/;"	f	class:Vector3
x	vecMath/Vector4.java	/^	public float x, y, z, w;$/;"	f	class:Vector4
y	vecMath/Vector2.java	/^	public float x, y;$/;"	f	class:Vector2
y	vecMath/Vector3.java	/^	public float x, y, z;$/;"	f	class:Vector3
y	vecMath/Vector4.java	/^	public float x, y, z, w;$/;"	f	class:Vector4
z	vecMath/Vector3.java	/^	public float x, y, z;$/;"	f	class:Vector3
z	vecMath/Vector4.java	/^	public float x, y, z, w;$/;"	f	class:Vector4
