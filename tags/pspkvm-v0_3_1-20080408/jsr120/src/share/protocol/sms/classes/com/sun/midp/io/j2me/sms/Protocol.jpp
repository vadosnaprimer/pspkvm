/*
 *
 *
 * Copyright  1990-2007 Sun Microsystems, Inc. All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 only, as published by the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License version 2 for more details (a copy is
 * included at /legal/license.txt).
 * 
 * You should have received a copy of the GNU General Public License
 * version 2 along with this work; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA
 * 
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
 * Clara, CA 95054 or visit www.sun.com if you need additional
 * information or have any questions.
 */

package com.sun.midp.io.j2me.sms;

import com.sun.midp.io.j2me.ProtocolBase;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Vector;
import javax.microedition.io.Connector;
import javax.microedition.io.Connection;
import javax.wireless.messaging.Message;
import javax.wireless.messaging.MessageConnection;

// Exceptions
import java.io.IOException;
import java.io.InterruptedIOException;

/**
 * SMS message connection implementation.
 *
 * <code>Protocol</code> itself is not instantiated. Instead, the application
 * calls <code>Connector.open</code> with an SMS URL string and obtains a
 * {@link javax.wireless.messaging.MessageConnection MessageConnection}
 *  object. It is an instance of <code>MessageConnection</code>
 * that is instantiated. The Generic Connection Framework mechanism
 * in CLDC will return a <code>Protocol</code> object, which is the
 * implementation of <code>MessageConnection</code>. The
 * <code>Protocol</code> object represents a connection to a low-level transport
 * mechanism.
 * <p>
 * Optional packages, such as <code>Protocol</code>, cannot reside in
 * small devices.
 * The Generic Connection Framework allows an application to reach the
 * optional packages and classes indirectly. For example, an application
 * can be written with a string that is used to open a connection. Inside
 * the implementation of <code>Connector</code>, the string is mapped to a
 * particular implementation: <code>Protocol</code>, in this case. This allows
 * the implementation to be optional even though
 * the interface, <code>MessageConnection</code>, is required.
 * <p>
 * Closing the connection frees an instance of <code>MessageConnection</code>.
 * <p>
 * The <code>Protocol</code> class contains methods
 * to open and close the connection to the low-level transport mechanism. The
 * messages passed on the transport mechanism are defined by the
 * {@link MessageObject MessageObject}
 * class.
 * Connections can be made in either client mode or server mode.
 * <ul>
 * <li>Client mode connections are for sending messages only. They are
 * created by passing a string identifying a destination address to the
 * <code>Connector.open()</code> method.</li>
 * <li>Server mode connections are for receiving and sending messages. They
 * are created by passing a string that identifies a port, or equivalent,
 * on the local host to the <code>Connector.open()</code> method.</li>
 * </ul>
 * The class also contains methods to send, receive, and construct
 * <code>Message</code> objects.
 * <p>
 * <p>
 * This class declares that it implements <code>StreamConnection</code>
 * so it can intercept calls to <code>Connector.open*Stream()</code>
 * to throw an <code>IllegalArgumentException</code>.
 * </p>
 *
 */
public class Protocol extends ProtocolBase {

    /** Local handle for port number. */
    private int m_iport = 0;

    /**	 DCS: GSM Alphabet  */
    protected static final int GSM_TEXT = 0;

    /**	 DCS: Binary */
    protected static final int GSM_BINARY = 1;

    /**	 DCS: Unicode UCS-2 */
    protected static final int GSM_UCS2 = 2;

    /** Creates a message connection protocol handler. */
    public Protocol() {
        super();
        ADDRESS_PREFIX = "sms://";
    }

    /*
     * MessageConnection Interface
     */

    /**
     * Constructs a new message object of a text or binary type.
     * If the <code>TEXT_MESSAGE</code> constant is passed in, the
     * <code>TextMessage</code> interface is implemented by the created object.
     * If the <code>BINARY_MESSAGE</code> constant is passed in, the
     * <code>BinaryMessage</code> interface is implemented by the created
     * object.
     * <p>
     * If this method is called in a sending mode, a new <code>Message</code>
     * object is requested from the connection. For example:
     * <p>
     * <code>Message msg = conn.newMessage(TEXT_MESSAGE);</code>
     * <p>
     * The <code>Message</code> object that was created doesn't have the
     * destination address set. It's the application's responsibility to set it
     * before the message is sent.
     * <p>
     * If this method is called in receiving mode, the
     * <code>Message</code> object does have
     * its address set. The application can act on the object to extract
     * the address and message data.
     * <p>
     * <!-- The <code>type</code> parameter indicates the number of bytes
     * that should be
     * allocated for the message. No restrictions are placed on the application
     * for the value of <code>size</code>.
     * A value of <code>null</code> is permitted and creates a
     * <code>Message</code> object
     * with a 0-length message. -->
     *
     * @param type <code>TEXT_MESSAGE</code> or
     *     <code>BINARY_MESSAGE</code>.
     * @return a new message.
     */
    public Message newMessage(String type) {
	String address = "+55555000";
	return newMessage(type, address);
    }

    /**
     * Constructs a new message object of a text or binary type and specifies
     * a destination address.
     * If the <code>TEXT_MESSAGE</code> constant is passed in, the
     * <code>TextMessage</code> interface is implemented by the created object.
     * If the <code>BINARY_MESSAGE</code> constant is passed in, the
     * <code>BinaryMessage</code> interface is implemented by the created
     * object.
     * <p>
     * The destination address <code>addr</code> has the following format:
     * </p>
     * <p>
     * <code>sms://</code><em>phone_number</em>:<em>port</em>
     * </p>
     *
     * @param type <code>TEXT_MESSAGE</code> or
     *     <code>BINARY_MESSAGE</code>.
     * @param addr the destination address of the message.
     * @return a new <code>Message</code> object.
     */
    public Message newMessage(String type, String addr) {
	Message message = null;

	if (type.equals(MessageConnection.TEXT_MESSAGE)) {

	    message = new TextObject(addr);
	} else {
	    if (type.equals(MessageConnection.BINARY_MESSAGE)) {

                message = new BinaryObject(addr);
	    } else {
                throw new IllegalArgumentException(
                                    "Message type not supported");
	    }
	}


	return message;
    }

    /**
     * Receives the bytes that have been sent over the connection, constructs a
     * <code>Message</code> object, and returns it.
     * <p>
     * If there are no <code>Message</code>s waiting on the connection, this
     * method will block until a message is received, or the
     * <code>MessageConnection</code> is closed.
     *
     * @return a <code>Message</code> object.
     * @exception java.io.IOException if an error occurs while receiving a
     *     message.
     * @exception java.io.InterruptedIOException if this
     *     <code>MessageConnection</code> object is closed during this receive
     *     method call.
     * @exception java.lang.SecurityException if the application does not have
     *      permission to receive messages using the given port number.
     */
    public synchronized Message receive() throws IOException {
	Message message = newMessage(MessageConnection.TEXT_MESSAGE,
	        	new String(ADDRESS_PREFIX
                                   + new String("+55555000")));
	        

	return message;
    }

    /**
     * Sends a message over the connection. This method extracts the data
     * payload from the <code>Message</code> object so that it can be sent as a
     * datagram.
     *
     * @param     dmsg a <code>Message</code> object
     * @exception java.io.IOException if the message could not be sent or
     *     because of network failure
     * @exception java.lang.IllegalArgumentException if the message is
     *     incomplete or contains invalid information. This exception is also
     *     thrown if the payload of the message exceeds the maximum length for
     *     the given messaging protocol.
     * @exception java.io.InterruptedIOException if a timeout occurs while
     *     either trying to send the message or if this <code>Connection</code>
     *     object is closed during this <code>send</code> operation.
     * @exception java.lang.NullPointerException if the parameter is
     *     <code>null</code>.
     * @exception java.lang.SecurityException if the application does not have
     *      permission to send the message.
     */
    public void send(Message dmsg) throws IOException {
    }

    /**
     * Returns how many segments in the underlying protocol would
     * be needed for sending the <code>Message</code> given as the parameter.
     *
     * <p>Note that this method does not actually send the message;
     * it will only calculate the number of protocol segments
     * needed for sending it.
     * </p>
     * <p>This method calculates the number of segments required
     * when this message is split into the protocol segments
     * utilizing the underlying protocol's features.
     * Possible implementation's limitations that may limit the number of
     * segments that can be sent using it are not taken into account. These
     * limitations are protocol specific. They are documented
     * with that protocol's adapter definition.
     * </p>
     * @param msg the message to be used for the calculation
     * @return number of protocol segments required to send the message.
     *     If the <code>Message</code> object can't be sent using
     *     the underlying protocol, <code>0</code> is returned.
     */
    public int numberOfSegments(Message msg) {
        return 1;
    }

    /**
     * Closes the connection. Resets the connection <code>open</code> flag
     * to <code>false</code>. Subsequent operations on a
     * closed connection should throw an appropriate exception.
     *
     *
     * @exception IOException  if an I/O error occurs
     */
    public void close() throws IOException {
    }

    /*
     * ConnectionBaseInterface Interface
     */

    /**
     * Opens a connection. This method is called from the
     * <code>Connector.open()</code> method to obtain the destination
     * address given in the <code>name</code> parameter.
     * <p>
     * The format for the <code>name</code> string for this method is:
     * </p>
     * <p>
     * <code>sms://<em>[phone_number</em>:<em>][port_number]</em></code>
     * </p>
     * <p>
     * where the <em>phone_number:</em> is optional.
     * If the <em>phone_number</em>
     * parameter is present, the connection is being opened in
     * client mode. This means that messages can be sent.
     * If the parameter is absent, the connection is being opened in
     * server mode. This means that messages can be sent and received.
     * <p>
     * The connection that is opened is to a low-level transport mechanism
     * which can be any of the following:
     * <ul>
     * <li>a datagram Short Message Peer-to-Peer (SMPP)
     * to a service center </li>
     * <li>a <code>comm</code> connection to a phone device with
     *   AT-commands</li>
     * <li>a native SMS stack</li>
     *  </ul>
     * Currently, the <code>mode</code> and <code>timeouts</code> parameters are
     * ignored.
     *
     * @param name the target of the connection
     * @param mode indicates whether the caller
     *             intends to write to the connection. Currently,
     *             this parameter is ignored.
     * @param timeouts indicates whether the caller
     *                 wants timeout exceptions. Currently,
     *             this parameter is ignored.
     * @return this connection
     * @exception IOException if the connection is closed or unavailable
     */
    public Connection openPrim(String name, int mode, boolean timeouts)
	throws IOException {

	return openPrimInternal(name, mode, timeouts);
    }




    /*
     * StreamConnection Interface
     */

    /**
     * Open and return an input stream for a connection.
     * This method always throw
     * <code>IllegalArgumentException</code>.
     *
     * @return                 An input stream
     * @exception IOException  If an I/O error occurs
     * @exception IllegalArgumentException  is thrown for all requests
     */
    public InputStream openInputStream() throws IOException {

	throw new IllegalArgumentException("Not supported");
    }

    /**
     * Open and return a data input stream for a connection.
     * This method always throw
     * <code>IllegalArgumentException</code>.
     *
     * @return                 An input stream
     * @exception IOException  If an I/O error occurs
     * @exception IllegalArgumentException  is thrown for all requests
     */
    public DataInputStream openDataInputStream() throws IOException {

	throw new IllegalArgumentException("Not supported");
    }

    /**
     * Open and return an output stream for a connection.
     * This method always throw
     * <code>IllegalArgumentException</code>.
     *
     * @return                 An output stream
     * @exception IOException  If an I/O error occurs
     * @exception IllegalArgumentException  is thrown for all requests
     */
    public OutputStream openOutputStream() throws IOException {

	throw new IllegalArgumentException("Not supported");
    }
    /**
     * Open and return a data output stream for a connection.
     * This method always throw
     * <code>IllegalArgumentException</code>.
     *
     * @return                 an output stream
     * @exception IOException  if an I/O error occurs
     * @exception IllegalArgumentException  is thrown for all requests
     */
    public DataOutputStream openDataOutputStream() throws IOException {

	throw new IllegalArgumentException("Not supported");
    }


    /*
     * Protocol members
     */

    /**
     * Opens a connection. This is the internal entry point that
     * allows the CBS protocol handler to use the reserved port for
     * CBS emulated messages.
     *
     * @param name the target of the connection
     * @param mode indicates whether the caller
     *             intends to write to the connection. Currently,
     *             this parameter is ignored.
     * @param timeouts indicates whether the caller
     *                 wants timeout exceptions. Currently,
     *             this parameter is ignored.
     * @return this connection
     * @exception IOException if the connection is closed or unavailable
     */
    public synchronized Connection openPrimInternal(String name,
						    int mode,
						    boolean timeouts)
                                                 throws IOException {
	return this;
    }

    /**
     * Native finalizer
     */
    // #ifdef ENABLE_CDC
    //protected native void finalize();
    // #else
    //private   native void finalize();
    // #endif ENABLE_CDC
}
