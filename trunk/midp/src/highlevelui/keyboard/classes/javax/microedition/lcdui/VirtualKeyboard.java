/*
 * $LastChangedDate: 2005-11-21 02:11:20 +0900 (ì›? 21 11 2005) $  
 *
 * Copyright  1990-2006 Sun Microsystems, Inc. All rights reserved.
 * SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package javax.microedition.lcdui;

import com.sun.midp.lcdui.*;
import com.sun.midp.configurator.Constants;
import com.sun.midp.chameleon.skins.*;
import com.sun.midp.chameleon.layers.PopupLayer;


/**
 * This is a popup layer that handles a sub-popup within the text tfContext
 * @author Amir Uval
 */

class VirtualKeyboard {

    /** indicates whether the virtual keyboard is enabled */
    public static final boolean USE_VIRTUAL_KEYBOARD = true;

    /** indicates whether the virtual keypad is enabled */
    public static final boolean USE_VIRTUAL_KEYPAD = false;

    /** indicates whether the virtual keyboard is opened automatically */
    public static final boolean USE_VIRTUAL_KEYBOARD_OPEN_AUTO = true;

    /** instance of the virtual keyboard listener */
    VirtualKeyboardListener vkl;
    
    // keyboard dimensions
    int kbX;
    int kbY;
    int kbWidth;
    int kbHeight;

    int fontW;       // width of 'M'
    int fontH;       // height of 'M'
    int buttonW;     // width of keyboard
    int buttonH;     // height of keyboard
    int fontWCenter; // placement of text inside button
    int fontHTop;    // placement of text inside button
    int maxRows;     // horizontal keyboard rows
    int maxColumns;  // vertical keyboard columns
    int fullColumns; // number of columns that are completely full with keys

    int currentChar = 0;
    int currentKeyboard = 1; // abc

    int textfieldHeight = 0; // height of text field area, including adornments

    int candidateFieldHeight = 0; // height of candidate input field

    char itemIndexWhenPressed;
    char PRESS_OUT_OF_BOUNDS = 0;

    /** array of all available keys n the keyboard */
    char[][] keys;

    boolean inMetaKeys = false; // traversal mode
    boolean inShift = false;
    int currentMeta = 0;
    Image[] metaKeys = null;
    boolean textKbd = false;
    Font f;

    /**
     * Virtual Keyboard constructor.
     * 
     * @param keys array of available keys for the keyboard
     * @param vkl the virtual keyboard listener
     * @param displayTextArea flag to indicate whether to display the text area
     */
    public VirtualKeyboard(char[][] keys, 
                           VirtualKeyboardListener vkl,
                           boolean displayTextArea, int neededColumns, int neededRows) throws VirtualKeyboardException {
        textKbd = displayTextArea;
        if(textKbd){
              PADDING = 4;
        } else {
              PADDING = 2;
        }
            
        
        currentKeyboard = 0;
        this.vkl = vkl;

        kbX = PADDING;
        kbY = PADDING;

        kbWidth = vkl.getAvailableWidth() - 2*PADDING;
        kbHeight = vkl.getAvailableHeight() - 2*PADDING;

        f = Font.getFont(Font.FACE_PROPORTIONAL, // or SYSTEM
                         Font.STYLE_PLAIN, 
                         Font.SIZE_SMALL);
        fontW = f.charWidth('M');
        fontH = f.getHeight();

        
        if (textKbd) {
            textfieldHeight = fontH + 3 * PADDING;
            buttonW = fontW * 2;
            buttonH = fontH * 3/2;
            fontHTop = (buttonH - fontH) / 2 ;
            fontWCenter = buttonW / 2;
        } else {
            buttonW = fontW * 3;
            buttonH = fontH * 3;
            fontHTop = (buttonH - fontH) / 2 ;
            fontWCenter = buttonW / 2;
        }
        candidateFieldHeight = 25;
        
        maxRows = (kbHeight - PADDING) / (buttonH + PADDING);

        if(textKbd) {
            if (neededColumns == 0) {
                maxColumns = (kbWidth - PADDING) / (buttonW + PADDING);
            } else {
                maxColumns = neededColumns;
            }
            kbWidth = maxColumns * (buttonW + PADDING) + PADDING + 1;
            kbX = (vkl.getAvailableWidth() - kbWidth) / 2;
        } else {
            maxColumns = 7;  //verify         
            kbWidth = maxColumns * (buttonW + PADDING) + PADDING + 1;
            kbX = 0;

        }

        if (neededRows == 0) {
            int tmpMax = 0; // will hold the longest keyboard.
            for (int i=0; i<keys.length; i++) {
                if (tmpMax < keys[i].length) tmpMax = keys[i].length ;
            }
            neededRows = (tmpMax + maxColumns - 1) / maxColumns;
        }
        if (neededRows > maxRows) {
            System.err.println("Keys list is too long for this size of screen.");
            System.err.println("Please split your keyboard array to multiple arrays.");
            //System.exit(0);
            throw new VirtualKeyboardException("Keys list is too long for this size of screen.");
        }
        maxRows = neededRows;
        int neededHeight=0;
        // do not require to account for meta keys for a canvas keyboard-hk
        if(textKbd){
             neededHeight = maxRows * (buttonH + PADDING) +
                           3 * PADDING + // between the keys and the meta keys
                           IMAGE_SIZE + META_PADDING * 3 + 
                           textfieldHeight + candidateFieldHeight;
             kbY = kbHeight - neededHeight + 2*PADDING;
             kbHeight = neededHeight;

        }else{
            neededHeight = maxRows * (buttonH + PADDING) +
                           3 * PADDING + textfieldHeight;
            kbY = vkl.getAvailableHeight()-neededHeight;
            kbHeight = neededHeight;
        }

        this.keys = keys;

        if(textKbd)
            currentKeyboard = 1;  // lower case
        else
            currentKeyboard = 0;
        fullColumns = keys[currentKeyboard].length / maxColumns;
        //need not be displayed in the canvas mode
        if(displayTextArea){  //hk
            metaKeys = new Image[7];
            metaKeys[OK_META_KEY] = Image.createImage(ok,0,ok.length);
            metaKeys[CANCEL_META_KEY] = Image.createImage(cancel,0,cancel.length);
            metaKeys[BACKSPACE_META_KEY] = Image.createImage(backspace,0,backspace.length);
            metaKeys[SHIFT_META_KEY] = Image.createImage(shift,0,shift.length);
            metaKeys[CAPS_META_KEY] = Image.createImage(caps,0,caps.length);
            metaKeys[MODE_META_KEY] = Image.createImage(mode,0,mode.length);
            metaKeys[CNINPUT_META_KEY] = Image.createImage(cn,0,cn.length);
        }
     }

    /**
     * Checks if the virtual keyboard is enabled.
     * @return <code>true</code> if the virtual keyboard is enabled,
     *         <code>false</code> otherwise.
     */
    static boolean isKeyboardEnabled(){
        return USE_VIRTUAL_KEYBOARD;
    }

    /**
     * Checks if the virtual keyboard is enabled.
     * @return <code>true</code> if the virtual keyboard is enabled,
     *         <code>false</code> otherwise.
     */
    static boolean isKeypadEnabled(){
        return USE_VIRTUAL_KEYPAD;
    }

    /**
     * Checks if the virtual keyboard is opened automatically.
     * @return <code>true</code> if the virtual keyboard is opened automatically,
     *         <code>false</code> otherwise.
     */
    static boolean isAutoOpen(){
        return USE_VIRTUAL_KEYBOARD_OPEN_AUTO;
    }

    /**
     * traverse the virtual keyboard according to key pressed.
     * 
     * @param type type of keypress
     * @param keyCode key code of key pressed
     */
    void traverse(int type, int keyCode) {
        System.out.println("VirtualK: keyCode="+keyCode);

        // Soft button means dismiss to the virtual keyboard
        if (type == EventConstants.RELEASED && keyCode == EventConstants.SOFT_BUTTON2) {
            vkl.virtualKeyEntered(type, (char)0);
            return;
        }

        if (!inMetaKeys) {
            if (type == EventConstants.RELEASED &&
                keyCode != Constants.KEYCODE_SELECT) {
                // in this case we don't want to traverse on key release
                
            } else {
              switch (keyCode) {
		case Constants.KEYCODE_RIGHT:
		    currentChar++;
		    if (currentChar > keys[currentKeyboard].length - 1) {
			currentChar = 0;
		    }
		    break;
		case Constants.KEYCODE_LEFT:
		    currentChar--;
		    if (currentChar < 0) {
			currentChar = keys[currentKeyboard].length - 1;
		    }
		    break;
		case Constants.KEYCODE_UP:
		    currentChar = (currentChar - maxColumns);
		    if (currentChar < 0) {
			currentChar = currentChar + (fullColumns + 1) * maxColumns;
			if (currentChar > keys[currentKeyboard].length -1) {
			    currentChar -= maxColumns;
			}
		    }
		    break;
		case Constants.KEYCODE_DOWN:
		    currentChar = (currentChar + maxColumns);
		    if (currentChar >  keys[currentKeyboard].length -1) {
			currentChar = (currentChar - maxColumns);
			inMetaKeys = true;
		    }
		    break;
		case Constants.KEYCODE_SELECT:
                  // System.out.println("Key Selected - type :" + type + ", " + keys[currentKeyboard][currentChar]);
		    vkl.virtualKeyEntered(type,keys[currentKeyboard][currentChar]);
		    if (inShift && type == EventConstants.PRESSED) {
                      // shift is a one-shot upper case
                      inShift = false;
                      if(textKbd){
                          currentKeyboard = 1;
                          vkl.virtualMetaKeyEntered(IM_CHANGED_KEY);			  
                      } //hk : still need a keyboard displayed
                      else{
                          currentKeyboard = 0;
                      }
                    }
		    break;
		}
            }
        } else {

            if (type != EventConstants.RELEASED) {

              // meta keys
              switch (keyCode) {
		case Constants.KEYCODE_RIGHT:
		    currentMeta++;
		    if (currentMeta > metaKeys.length - 1) {
			currentMeta = 0;
		    }
		    break;
		case Constants.KEYCODE_LEFT:
		    currentMeta--;
		    if (currentMeta < 0) {
			currentMeta = metaKeys.length - 1;
		    }
		    break;
		case Constants.KEYCODE_UP:
		    inMetaKeys = false;
		    break;
		case Constants.KEYCODE_DOWN:
		    inMetaKeys = false;
		    currentChar = (currentChar + maxColumns);
		    if (currentChar >  keys[currentKeyboard].length -1) {
			currentChar = currentChar % maxColumns;
		    }
		    break;
		case Constants.KEYCODE_SELECT:
    
		    switch (currentMeta) {
		    case SHIFT_META_KEY: //"Shift" - one shot upper case
			if (currentKeyboard == 1) {  // lower case
			    currentKeyboard = 2;
			    vkl.virtualMetaKeyEntered(IM_CHANGED_KEY);
			}
			inShift = true;
			inMetaKeys = false;
			break;
		    case CAPS_META_KEY: //"CapsL"  (caps lock)
			if (currentKeyboard == 1) {  // lower case
			    currentKeyboard = 2;
			} else if (currentKeyboard == 2) {  // upper case
			    currentKeyboard = 1;
			}
                     vkl.virtualMetaKeyEntered(IM_CHANGED_KEY);
			break;
		    case MODE_META_KEY: //"Mode"  
			currentKeyboard = (currentKeyboard+1) % keys.length;
                     vkl.virtualMetaKeyEntered(IM_CHANGED_KEY);
			break;
		    case BACKSPACE_META_KEY: //"backspace" 
			vkl.virtualMetaKeyEntered(BACKSPACE_META_KEY);
			break;
		    case OK_META_KEY: //"ok"
			vkl.virtualMetaKeyEntered(OK_META_KEY);
			break;
		    case CANCEL_META_KEY: //"cancel"
			vkl.virtualMetaKeyEntered(CANCEL_META_KEY);
			break;
		    case CNINPUT_META_KEY: //"cn_input"
		       vkl.virtualMetaKeyEntered(CNINPUT_META_KEY);
		       break;
		    }
		}
            }
        }

        if (type != EventConstants.RELEASED) {
            if (EventConstants.SYSTEM_KEY_CLEAR ==
            	  KeyConverter.getSystemKey(keyCode)) {
            	     vkl.virtualMetaKeyEntered(BACKSPACE_META_KEY);
            } else {

                switch (keyCode) {
                  //Short cuts by number keys
                  case Canvas.KEY_POUND:
            	        vkl.virtualMetaKeyEntered(CNINPUT_META_KEY);
            	        break;
            	    case Canvas.KEY_STAR:
            	        currentKeyboard = (currentKeyboard+1) % keys.length;
                      vkl.virtualMetaKeyEntered(IM_CHANGED_KEY);
            	        break;
            	    case Canvas.KEY_NUM2:
            	        vkl.virtualKeyEntered(type, '2');
                       break;
                   case Canvas.KEY_NUM4:
                       vkl.virtualKeyEntered(type, '4');
                       break;
            	    case Canvas.KEY_NUM6:
            	        vkl.virtualKeyEntered(type, '6');
                       break;
                   case Canvas.KEY_NUM8:
                       vkl.virtualKeyEntered(type, '8');
                       break;
                   case Canvas.KEY_NUM5:
                       vkl.virtualKeyEntered(type, '5');
                       break;
                }
            }
        }
        // triggers paint()
        vkl.repaintVK();
    }

    /**
     * paint the virtual keyboard on the screen
     * 
     * @param g The graphics context to paint to
     */
    protected void paint(Graphics g) {
        int actualHeight = kbHeight + candidateFieldHeight;
        g.setFont(f);
        g.setColor(LIGHT_GRAY);

        g.fillRect(0,0,kbWidth,actualHeight);
        drawBorder(g,0,0,kbWidth-1,actualHeight-1);

        if (candidateFieldHeight > 0) {
            drawCandidateBar(g);
        }

        g.translate(0,candidateFieldHeight);

        if (textfieldHeight > 0) {
            drawTextField(g);
        }

        g.translate(0,textfieldHeight);
        drawKeys(g);

        g.translate(0,actualHeight - 
                    (IMAGE_SIZE + 6 * META_PADDING) -
                    textfieldHeight - candidateFieldHeight);
        if(textKbd)
            drawMetaKeys(g);
      
    }

    /**
     * Draw the text field of the virtual keyboard.
     * 
     * @param g The graphics context to paint to
     */
    void drawTextField(Graphics g) {
        drawSunkedBorder(g,PADDING,PADDING,
                         kbWidth - 2*PADDING, textfieldHeight); 

        g.setClip(0,0,
                         kbWidth - 2*PADDING, textfieldHeight); 


        g.translate(PADDING + 1,PADDING);

        vkl.paintTextOnly(g,kbWidth - 3*PADDING,
                          textfieldHeight - 2*PADDING);

        g.translate(-PADDING - 1,-PADDING);
        g.setClip(0,0,kbWidth,kbHeight);
    }

    void drawCandidateBar(Graphics g) {
        
        g.setClip(0,0,
                         kbWidth - 2*PADDING, candidateFieldHeight); 


        g.translate(PADDING + 1,PADDING);

        vkl.paintCandidateBar(g,kbWidth - 3*PADDING,
                          candidateFieldHeight - 2*PADDING);

        g.translate(-PADDING - 1,-PADDING);
        g.setClip(0,0,kbWidth,kbHeight);
    }

    /**
     * draw keyboard keys
     * 
     * @param g The graphics context to paint to
     */
    void drawKeys(Graphics g) {

        int tmp;
        
        if(!textKbd){
            currentKeyboard = 0;
        }
        
        for (int i=0; i<maxRows; i++) {
            for (int j=0; j<maxColumns; j++) {
                tmp = i * maxColumns + j;
                if (tmp >= keys[currentKeyboard].length) {
                    // no more chars to draw
                    break;
                }

                if (currentChar == tmp && inMetaKeys == false) {

                    drawButton(g,j * (PADDING+buttonW) + PADDING,
                               i * (PADDING+buttonH) + PADDING,
                               buttonW, buttonH);
                } else {
                    drawBeveledButton(g, j * (PADDING+buttonW) + PADDING,
                                      i * (PADDING+buttonH) + PADDING,
                                      buttonW, buttonH);
                }

                //g.setColor(DARK_GRAY);
                g.setColor(TEXT_COLOR);
                g.drawString(""+keys[currentKeyboard][tmp],
                             j * (PADDING+buttonW) + PADDING + fontWCenter,
                             i * (PADDING+buttonH) + PADDING + fontHTop,
                             g.HCENTER|g.TOP);
            }
        }
    }

    /**
     * draw keyboard meta keys
     * 
     * @param g The graphics context to paint to
     */
    void drawMetaKeys(Graphics g) {

        int mkWidth = metaKeys.length *   
                      (IMAGE_SIZE + 3*META_PADDING) + META_PADDING;
        int currX = (kbWidth - mkWidth) / 2 + 2*META_PADDING;
        int currY = 0;

        if (inMetaKeys) {
            drawBorder(g,currX - 2*META_PADDING,   // x1
                       currY - 2*META_PADDING,     // y1
                       currX + mkWidth,
                       currY + IMAGE_SIZE + 4*META_PADDING);
        }

        for (int i=0; i<metaKeys.length; i++) {
            if (currX + IMAGE_SIZE > kbWidth) {

                currX = PADDING;
                currY -= (IMAGE_SIZE + META_PADDING);
            }
            if (inMetaKeys && i == currentMeta) {
                drawButton(g,
                           currX,currY,
                           IMAGE_SIZE + 2*META_PADDING,
                           IMAGE_SIZE+ 2*META_PADDING);
            } else {
                drawBeveledButton(g,
                                  currX,currY,
                                  IMAGE_SIZE + 2*META_PADDING,
                                  IMAGE_SIZE + 2*META_PADDING);
            }
            g.drawImage(metaKeys[i],
                        currX+META_PADDING,
                        currY+META_PADDING,
                        g.TOP|g.LEFT);
            currX += (IMAGE_SIZE + 2*META_PADDING + 2);
            if (currX > kbWidth) {
                currX = META_PADDING;
                currY -= (IMAGE_SIZE + META_PADDING);
            }
        }   
    }

    /**
     * draw a border
     * 
     * @param g The graphics context to paint to
     * @param x1 x-coordinate of the button's location
     * @param y1 y-coordinate of the button's location
     * @param x2 the x-coordinate at the width of the border
     * @param y2 the y-coordinate at the height of the border
     */
    private void drawBorder(Graphics g, int x1, int y1, int x2, int y2) {

        g.setColor(GRAY);
        g.drawLine(x1+2,y1+2,x1+2,y2-3);    // left
        g.drawLine(x1+2,y1+2,x2-2,y1+2);    // top
        g.drawLine(x1+2,y2-1,x2-1,y2-1);    // bottom
        g.drawLine(x2-1,y1+2,x2-1,y2-1);    // right
        g.setColor(WHITE);
        g.drawRect(x1+1,y1+1,x2-x1-3,y2-y1-3);
    }

    /**
     * draw a sunken border
     * 
     * @param g The graphics context to paint to
     * @param x1 x-coordinate of the button's location
     * @param y1 y-coordinate of the button's location
     * @param x2 the x-coordinate at the width of the border
     * @param y2 the y-coordinate at the height of the border
     */
    private void drawSunkedBorder(Graphics g, int x1, int y1, int x2, int y2) {

        g.setColor(WHITE);
        g.fillRect(x1+2,y1+2,x2-x1-2,y2-y1-2);

        g.setColor(GRAY);
        g.drawLine(x1+2,y1+2,x1+2,y2-2);    //left
        g.drawLine(x1+2,y1+2,x2-2,y1+2);    //top
        g.setColor(DARK_GRAY);
        g.drawLine(x1+3,y1+3,x1+3,y2-3);    //left
        g.drawLine(x1+3,y1+3,x2-3,y1+3);    //top

        g.setColor(LIGHT_GRAY);
        g.drawLine(x1+3,y2-2,x2-2,y2-2);    //bottom
        g.drawLine(x2-2,y1+3,x2-2,y2-2);    //right
    }

    /**
     * draw a button
     * 
     * @param g The graphics context to paint to
     * @param x x-coordinate of the button's location
     * @param y y-coordinate of the button's location
     * @param w the width of the button
     * @param h the height of the button
     */
    private void drawButton(Graphics g, int x, int y, int w, int h) {
        g.setColor(GRAY);
        g.drawLine(x+1,y+h-1,x+w,y+h-1);    //bottom
        g.drawLine(x+w-1,y+1,x+w-1,y+h);    //right

        g.setColor(DARK_GRAY);
        g.drawLine(x,y+h,x+w,y+h);    //bottom
        g.drawLine(x+w,y,x+w,y+h);    //right

        g.setColor(WHITE);
        g.drawLine(x,y,x+w-1,y);
        g.drawLine(x,y,x,y+h-1);

    }

    /**
     * draw a beveled button
     * 
     * @param g The graphics context to paint to
     * @param x x-coordinate of the button's location
     * @param y y-coordinate of the button's location
     * @param w the width of the button
     * @param h the height of the button
     */
    private void drawBeveledButton(Graphics g, int x, int y, int w, int h) {
        g.setColor(GRAY);
        g.drawLine(x+1,y+h-1,x+w,y+h-1);    //bottom
        g.drawLine(x+w-1,y+1,x+w-1,y+h);    //right

        g.setColor(WHITE);
        g.drawLine(x,y+h,x+w,y+h);    //bottom
        g.drawLine(x+w,y,x+w,y+h);    //right

        g.setColor(GRAY);
        g.drawLine(x,y,x+w-1,y);
        g.drawLine(x,y,x,y+h-1);

        g.setColor(WHITE);
        g.drawLine(x+1,y+1,x+w-2,y+1);
        g.drawLine(x+1,y+1,x+1,y+h-2);

    }

    
   
    /**
     * Helper function to determine the itemIndex at the x,y position
     *
     * @param x,y   pointer coordinates in menuLayer's space (0,0 means left-top
     *      corner) both value can be negative as menuLayer handles the pointer
     *      event outside its bounds
     * @return menuItem's index since 0, or PRESS_OUT_OF_BOUNDS, PRESS_ON_TITLE
     *
     */
    private boolean isKeyAtPointerPosition(int x, int y) {
        int ret=-1;
        int tmpX,tmpY,tmp;
         for (int i=0; i<maxRows; i++) {
            for (int j=0; j<maxColumns; j++) {
                tmp = i * maxColumns + j;
                if (tmp >= keys[currentKeyboard].length) {
                    // no more chars to draw
                    break;
                }

                tmpX=x-(j * (PADDING+buttonW) + PADDING);
                tmpY=y-(i * (PADDING+buttonH) + PADDING)-textfieldHeight;

                if( (tmpX>=0)&&(tmpY>=0) &&(tmpX<buttonW) && (tmpY< buttonH)) {
                    currentChar = tmp;
                    inMetaKeys = false;
                    return true;
                }

            }
         }

         if (metaKeys==null) {
             return false;
         }

        //Check for meta chars
        int mkWidth = metaKeys.length *   
                      (IMAGE_SIZE + 3*META_PADDING) + META_PADDING;
        int currX = (kbWidth - mkWidth) / 2 + 2*META_PADDING;
        int currY = kbHeight - 
                    (IMAGE_SIZE + 6 * META_PADDING);

        for (int i=0; i<metaKeys.length; i++) {
            if (currX + IMAGE_SIZE > kbWidth) {

                currX = PADDING;
                currY -= (IMAGE_SIZE + META_PADDING);
            }


            tmpX = x-currX;
            tmpY = y-currY;

            if( (tmpX>=0)&&(tmpY>=0) &&(tmpX<(IMAGE_SIZE + 2*META_PADDING)) && (tmpY< (IMAGE_SIZE + 2*META_PADDING))) {
                currentMeta = i;
                inMetaKeys = true;
                return true;
            }
            
            currX += (IMAGE_SIZE + 2*META_PADDING + 2);
            if (currX > kbWidth) {
                currX = META_PADDING;
                currY -= (IMAGE_SIZE + META_PADDING);
            }
        }

        return false;
    }

    /**
     * Handle input from a pen tap. Parameters describe
     * the type of pen event and the x,y location in the
     * layer at which the event occurred. Important : the
     * x,y location of the pen tap will already be translated
     * into the coordinate space of the layer.
     *
     * @param type the type of pen event
     * @param x the x coordinate of the event
     * @param y the y coordinate of the event
     */
    public boolean pointerInput(int type, int x, int y) {
        switch (type) {
        case EventConstants.PRESSED:
           

            // dismiss the menu layer if the user pressed outside the menu
            if ( isKeyAtPointerPosition(x, y)) {
             // press on valid key
                traverse(type,Constants.KEYCODE_SELECT);
                vkl.repaintVK();
               
            }
            break;
        case EventConstants.RELEASED:
                if ( isKeyAtPointerPosition(x, y)) {
                    traverse(type,Constants.KEYCODE_SELECT);
                    vkl.repaintVK();
               
            }

            break;
        }
        // return true always as menuLayer will capture all of the pointer inputs
        return true;  
    }


    /** backspace.png */
    private byte[] backspace =
    { (byte)0x89, (byte)0x50, (byte)0x4e, (byte)0x47, (byte)0x0d, (byte)0x0a, (byte)0x1a, (byte)0x0a, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x0d, (byte)0x49, (byte)0x48, (byte)0x44, (byte)0x52, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, (byte)0x08, (byte)0x03, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x45, 
        (byte)0x35, (byte)0x14, (byte)0x4e, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04, (byte)0x67, (byte)0x41, (byte)0x4d, 
        (byte)0x41, (byte)0x00, (byte)0x00, (byte)0xb1, (byte)0x8e, (byte)0x7c, (byte)0xfb, (byte)0x51, (byte)0x93, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x20, (byte)0x63, (byte)0x48, (byte)0x52, (byte)0x4d, (byte)0x00, (byte)0x00, (byte)0x7a, 
        (byte)0x25, (byte)0x00, (byte)0x00, (byte)0x80, (byte)0x83, (byte)0x00, (byte)0x00, (byte)0xf9, (byte)0xff, (byte)0x00, 
        (byte)0x00, (byte)0x80, (byte)0xe6, (byte)0x00, (byte)0x00, (byte)0x75, (byte)0x2e, (byte)0x00, (byte)0x00, (byte)0xea, 
        (byte)0x5f, (byte)0x00, (byte)0x00, (byte)0x3a, (byte)0x97, (byte)0x00, (byte)0x00, (byte)0x17, (byte)0x6f, (byte)0x69, 
        (byte)0xe4, (byte)0xc4, (byte)0x2b, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x00, (byte)0x50, (byte)0x4c, (byte)0x54, 
        (byte)0x45, (byte)0xe6, (byte)0xe6, (byte)0xe6, (byte)0xcc, (byte)0xcc, (byte)0xcc, (byte)0xa6, (byte)0xa6, (byte)0xa6, 
        (byte)0x80, (byte)0x80, (byte)0x80, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x1b, 
        (byte)0xff, (byte)0xdb, (byte)0xbb, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x05, (byte)0x74, (byte)0x52, (byte)0x4e, 
        (byte)0x53, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0x00, (byte)0xfb, (byte)0xb6, (byte)0x0e, (byte)0x53, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x70, (byte)0x49, (byte)0x44, (byte)0x41, (byte)0x54, (byte)0x78, (byte)0x9c, 
        (byte)0x62, (byte)0x60, (byte)0x41, (byte)0x06, (byte)0x00, (byte)0x01, (byte)0xc4, (byte)0x80, (byte)0xc2, (byte)0x03, 
        (byte)0x08, (byte)0x20, (byte)0x30, (byte)0x8f, (byte)0x11, (byte)0x0a, (byte)0x98, (byte)0x01, (byte)0x02, (byte)0x08, 
        (byte)0xc4, (byte)0x63, (byte)0x64, (byte)0x80, (byte)0x02, (byte)0x66, (byte)0x80, (byte)0x00, (byte)0x62, (byte)0x00, 
        (byte)0x73, (byte)0x98, (byte)0x81, (byte)0x4c, (byte)0x26, (byte)0x20, (byte)0x05, (byte)0x10, (byte)0x40, (byte)0x0c, 
        (byte)0x10, (byte)0x19, (byte)0x66, (byte)0x10, (byte)0x87, (byte)0x81, (byte)0x19, (byte)0x20, (byte)0x80, (byte)0x18, 
        (byte)0x18, (byte)0x61, (byte)0x8a, (byte)0x40, (byte)0x04, (byte)0x40, (byte)0x00, (byte)0x31, (byte)0xb0, (byte)0x80, 
        (byte)0x69, (byte)0x26, (byte)0x30, (byte)0x97, (byte)0x19, (byte)0x20, (byte)0x80, (byte)0x80, (byte)0xfa, (byte)0x98, 
        (byte)0x19, (byte)0xa0, (byte)0xca, (byte)0x18, (byte)0x98, (byte)0x01, (byte)0x02, (byte)0x08, (byte)0x64, (byte)0x26, 
        (byte)0x33, (byte)0xdc, (byte)0x4c, (byte)0x80, (byte)0x00, (byte)0x02, (byte)0xdb, (byte)0x07, (byte)0xe3, (byte)0x32, 
        (byte)0x03, (byte)0x04, (byte)0x10, (byte)0xc4, (byte)0x2d, (byte)0xcc, (byte)0x50, (byte)0x00, (byte)0x10, (byte)0x40, 
        (byte)0xa8, (byte)0x2e, (byte)0x03, (byte)0x08, (byte)0x30, (byte)0x00, (byte)0x82, (byte)0x47, (byte)0x01, (byte)0x63, 
        (byte)0x1f, (byte)0x9e, (byte)0x42, (byte)0x65, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x49, (byte)0x45, 
        (byte)0x4e, (byte)0x44, (byte)0xae, (byte)0x42, (byte)0x60, (byte)0x82};
/** cancel.png */
    private byte[] cancel =
    { (byte)0x89, (byte)0x50, (byte)0x4e, (byte)0x47, (byte)0x0d, (byte)0x0a, (byte)0x1a, (byte)0x0a, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x0d, (byte)0x49, (byte)0x48, (byte)0x44, (byte)0x52, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, (byte)0x08, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x05, 
        (byte)0xec, (byte)0xd4, (byte)0xea, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04, (byte)0x67, (byte)0x41, (byte)0x4d, 
        (byte)0x41, (byte)0x00, (byte)0x00, (byte)0xaf, (byte)0xc8, (byte)0x37, (byte)0x05, (byte)0x8a, (byte)0xe9, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x19, (byte)0x74, (byte)0x45, (byte)0x58, (byte)0x74, (byte)0x53, (byte)0x6f, (byte)0x66, 
        (byte)0x74, (byte)0x77, (byte)0x61, (byte)0x72, (byte)0x65, (byte)0x00, (byte)0x41, (byte)0x64, (byte)0x6f, (byte)0x62, 
        (byte)0x65, (byte)0x20, (byte)0x49, (byte)0x6d, (byte)0x61, (byte)0x67, (byte)0x65, (byte)0x52, (byte)0x65, (byte)0x61, 
        (byte)0x64, (byte)0x79, (byte)0x71, (byte)0xc9, (byte)0x65, (byte)0x3c, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x05, 
        (byte)0x49, (byte)0x44, (byte)0x41, (byte)0x54, (byte)0x78, (byte)0xda, (byte)0x62, (byte)0xfc, (byte)0xff, (byte)0xff, 
        (byte)0x3f, (byte)0x03, (byte)0x08, (byte)0x00, (byte)0x04, (byte)0x10, (byte)0x03, (byte)0x88, (byte)0xc1, (byte)0xc4, 
        (byte)0xc4, (byte)0xf4, (byte)0x1e, (byte)0x20, (byte)0x80, (byte)0x18, (byte)0x61, (byte)0x22, (byte)0x00, (byte)0x01, 
        (byte)0x04, (byte)0xe6, (byte)0x81, (byte)0x38, (byte)0x00, (byte)0x01, (byte)0x04, (byte)0x93, (byte)0xfa, (byte)0x0f, 
        (byte)0xc2, (byte)0x20, (byte)0x36, (byte)0x40, (byte)0x00, (byte)0x21, (byte)0x94, (byte)0x40, (byte)0x01, (byte)0x40, 
        (byte)0x00, (byte)0xa1, (byte)0x08, (byte)0x00, (byte)0x04, (byte)0x10, (byte)0x23, (byte)0x50, (byte)0x19, (byte)0x9c, 
        (byte)0x03, (byte)0x10, (byte)0x40, (byte)0x2c, (byte)0x50, (byte)0x5a, (byte)0x00, (byte)0x88, (byte)0x0d, (byte)0x00, 
        (byte)0x02, (byte)0x08, (byte)0x45, (byte)0x19, (byte)0x40, (byte)0x00, (byte)0xc1, (byte)0x4c, (byte)0x05, (byte)0xe1, 
        (byte)0x7a, (byte)0x28, (byte)0x0d, (byte)0xc6, (byte)0x20, (byte)0x71, (byte)0x80, (byte)0x00, (byte)0x02, (byte)0xab, 
        (byte)0x64, (byte)0x66, (byte)0x66, (byte)0x86, (byte)0xab, (byte)0x05, (byte)0x99, (byte)0x0b, (byte)0x62, (byte)0xfc, 
        (byte)0xfd, (byte)0xfb, (byte)0x97, (byte)0x01, (byte)0x20, (byte)0x80, (byte)0x30, (byte)0xac, (byte)0x47, (byte)0x06, 
        (byte)0x00, (byte)0x01, (byte)0x84, (byte)0x53, (byte)0x12, (byte)0x20, (byte)0x80, (byte)0x60, (byte)0xf6, (byte)0x09, 
        (byte)0x20, (byte)0xd9, (byte)0x65, (byte)0x00, (byte)0xa2, (byte)0x01, (byte)0x02, (byte)0x88, (byte)0x09, (byte)0xc9, 
        (byte)0x89, (byte)0xfd, (byte)0x40, (byte)0xbc, (byte)0x1f, (byte)0xe4, (byte)0x54, (byte)0x90, (byte)0x00, (byte)0x40, 
        (byte)0x00, (byte)0xc1, (byte)0x24, (byte)0x1e, (byte)0x00, (byte)0xb1, (byte)0x02, (byte)0x10, (byte)0x1f, (byte)0x00, 
        (byte)0xe2, (byte)0x05, (byte)0x20, (byte)0x01, (byte)0x80, (byte)0x00, (byte)0x82, (byte)0x79, (byte)0xca, (byte)0x01, 
        (byte)0xaa, (byte)0x2b, (byte)0x00, (byte)0xca, (byte)0x9f, (byte)0x08, (byte)0x10, (byte)0x40, (byte)0x38, (byte)0x2d, 
        (byte)0x07, (byte)0x08, (byte)0x20, (byte)0x26, (byte)0x5c, (byte)0xce, (byte)0x05, (byte)0x08, (byte)0x20, (byte)0xbc, 
        (byte)0x7e, (byte)0xc1, (byte)0x05, (byte)0x00, (byte)0x02, (byte)0x08, (byte)0xec, (byte)0x15, (byte)0xb4, (byte)0xe0, 
        (byte)0xfb, (byte)0x8f, (byte)0xe4, (byte)0x35, (byte)0x10, (byte)0xbd, (byte)0x1f, (byte)0x2a, (byte)0x56, (byte)0x00, 
        (byte)0x0b, (byte)0x52, (byte)0x80, (byte)0x00, (byte)0x42, (byte)0xd7, (byte)0x04, (byte)0xc2, (byte)0x09, (byte)0x50, 
        (byte)0x45, (byte)0x30, (byte)0xc5, (byte)0x01, (byte)0xe8, (byte)0xf1, (byte)0x00, (byte)0x10, (byte)0x40, (byte)0xd8, 
        (byte)0xdc, (byte)0x7d, (byte)0x01, (byte)0x88, (byte)0x3f, (byte)0x40, (byte)0xc3, (byte)0xe8, (byte)0x03, (byte)0x34, 
        (byte)0x78, (byte)0x50, (byte)0x00, (byte)0x40, (byte)0x00, (byte)0x21, (byte)0xdb, (byte)0x04, (byte)0xb2, (byte)0xe1, 
        (byte)0x3d, (byte)0x10, (byte)0xaf, (byte)0x47, (byte)0x0b, (byte)0xf9, (byte)0x7e, (byte)0xa8, (byte)0x8d, (byte)0xeb, 
        (byte)0x61, (byte)0x36, (byte)0x01, (byte)0x04, (byte)0x10, (byte)0x59, (byte)0x01, (byte)0x01, (byte)0x10, (byte)0x60, 
        (byte)0x00, (byte)0x1b, (byte)0x87, (byte)0x6f, (byte)0x18, (byte)0x70, (byte)0x09, (byte)0x02, (byte)0x0d, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x49, (byte)0x45, (byte)0x4e, (byte)0x44, (byte)0xae, (byte)0x42, (byte)0x60, 
        (byte)0x82};
/** caps.png */
    private byte[] caps =
    { (byte)0x89, (byte)0x50, (byte)0x4e, (byte)0x47, (byte)0x0d, (byte)0x0a, (byte)0x1a, (byte)0x0a, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x0d, (byte)0x49, (byte)0x48, (byte)0x44, (byte)0x52, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, (byte)0x08, (byte)0x03, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x45, 
        (byte)0x35, (byte)0x14, (byte)0x4e, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04, (byte)0x67, (byte)0x41, (byte)0x4d, 
        (byte)0x41, (byte)0x00, (byte)0x00, (byte)0xb1, (byte)0x8e, (byte)0x7c, (byte)0xfb, (byte)0x51, (byte)0x93, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x20, (byte)0x63, (byte)0x48, (byte)0x52, (byte)0x4d, (byte)0x00, (byte)0x00, (byte)0x7a, 
        (byte)0x25, (byte)0x00, (byte)0x00, (byte)0x80, (byte)0x83, (byte)0x00, (byte)0x00, (byte)0xf9, (byte)0xff, (byte)0x00, 
        (byte)0x00, (byte)0x80, (byte)0xe6, (byte)0x00, (byte)0x00, (byte)0x75, (byte)0x2e, (byte)0x00, (byte)0x00, (byte)0xea, 
        (byte)0x5f, (byte)0x00, (byte)0x00, (byte)0x3a, (byte)0x97, (byte)0x00, (byte)0x00, (byte)0x17, (byte)0x6f, (byte)0x69, 
        (byte)0xe4, (byte)0xc4, (byte)0x2b, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x00, (byte)0x50, (byte)0x4c, (byte)0x54, 
        (byte)0x45, (byte)0xe6, (byte)0xe6, (byte)0xe6, (byte)0xcc, (byte)0xcc, (byte)0xcc, (byte)0x7d, (byte)0x7d, (byte)0x7d, 
        (byte)0xff, (byte)0xff, (byte)0xff, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xa0, 
        (byte)0xe5, (byte)0xcc, (byte)0x14, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04, (byte)0x74, (byte)0x52, (byte)0x4e, 
        (byte)0x53, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0x00, (byte)0x40, (byte)0x2a, (byte)0xa9, (byte)0xf4, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x65, (byte)0x49, (byte)0x44, (byte)0x41, (byte)0x54, (byte)0x78, (byte)0x9c, (byte)0x62, 
        (byte)0x60, (byte)0x06, (byte)0x03, (byte)0x46, (byte)0x08, (byte)0x05, (byte)0x10, (byte)0x40, (byte)0x0c, (byte)0x10, 
        (byte)0x0e, (byte)0x03, (byte)0x13, (byte)0x98, (byte)0x06, (byte)0x08, (byte)0x20, (byte)0x06, (byte)0x08, (byte)0x87, 
        (byte)0x01, (byte)0xc2, (byte)0x05, (byte)0x08, (byte)0x20, (byte)0x06, (byte)0x28, (byte)0x07, (byte)0xc2, (byte)0x05, 
        (byte)0x08, (byte)0x20, (byte)0x06, (byte)0x18, (byte)0x07, (byte)0xcc, (byte)0x05, (byte)0x08, (byte)0x20, (byte)0x06, 
        (byte)0x38, (byte)0x07, (byte)0xc4, (byte)0x05, (byte)0x08, (byte)0x20, (byte)0x06, (byte)0x46, (byte)0x26, (byte)0x26, 
        (byte)0x26, (byte)0xb0, (byte)0x3e, (byte)0x10, (byte)0x00, (byte)0x08, (byte)0x20, (byte)0x54, (byte)0x53, (byte)0x00, 
        (byte)0x02, (byte)0x08, (byte)0xc2, (byte)0x03, (byte)0x89, (byte)0x83, (byte)0x18, (byte)0x00, (byte)0x01, (byte)0x04, 
        (byte)0xb1, (byte)0x0f, (byte)0x06, (byte)0x00, (byte)0x02, (byte)0x08, (byte)0x22, (byte)0x07, (byte)0x02, (byte)0x20, 
        (byte)0x06, (byte)0x40, (byte)0x00, (byte)0xa1, (byte)0xea, (byte)0x03, (byte)0x08, (byte)0x20, (byte)0x54, (byte)0x7d, 
        (byte)0x00, (byte)0x01, (byte)0x06, (byte)0x00, (byte)0x78, (byte)0xe7, (byte)0x01, (byte)0x5d, (byte)0x6f, (byte)0x06, 
        (byte)0x04, (byte)0xbf, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x49, (byte)0x45, (byte)0x4e, (byte)0x44, 
        (byte)0xae, (byte)0x42, (byte)0x60, (byte)0x82};
/** mode.png */
    private byte[] mode =
    { (byte)0x89, (byte)0x50, (byte)0x4e, (byte)0x47, (byte)0x0d, (byte)0x0a, (byte)0x1a, (byte)0x0a, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x0d, (byte)0x49, (byte)0x48, (byte)0x44, (byte)0x52, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, (byte)0x08, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x05, 
        (byte)0xec, (byte)0xd4, (byte)0xea, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04, (byte)0x67, (byte)0x41, (byte)0x4d, 
        (byte)0x41, (byte)0x00, (byte)0x00, (byte)0xaf, (byte)0xc8, (byte)0x37, (byte)0x05, (byte)0x8a, (byte)0xe9, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x19, (byte)0x74, (byte)0x45, (byte)0x58, (byte)0x74, (byte)0x53, (byte)0x6f, (byte)0x66, 
        (byte)0x74, (byte)0x77, (byte)0x61, (byte)0x72, (byte)0x65, (byte)0x00, (byte)0x41, (byte)0x64, (byte)0x6f, (byte)0x62, 
        (byte)0x65, (byte)0x20, (byte)0x49, (byte)0x6d, (byte)0x61, (byte)0x67, (byte)0x65, (byte)0x52, (byte)0x65, (byte)0x61, 
        (byte)0x64, (byte)0x79, (byte)0x71, (byte)0xc9, (byte)0x65, (byte)0x3c, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x3a, 
        (byte)0x49, (byte)0x44, (byte)0x41, (byte)0x54, (byte)0x78, (byte)0xda, (byte)0x62, (byte)0x60, (byte)0x80, (byte)0x00, 
        (byte)0x11, (byte)0x80, (byte)0x00, (byte)0x82, (byte)0xd2, (byte)0x0c, (byte)0x8b, (byte)0x01, (byte)0x02, (byte)0x08, 
        (byte)0xc6, (byte)0x60, (byte)0x00, (byte)0x08, (byte)0x20, (byte)0x10, (byte)0xba, (byte)0x0c, (byte)0x22, (byte)0x00, 
        (byte)0x02, (byte)0x08, (byte)0x03, (byte)0x01, (byte)0x04, (byte)0x10, (byte)0x32, (byte)0x3a, (byte)0x09, (byte)0x22, 
        (byte)0x00, (byte)0x02, (byte)0x08, (byte)0x84, (byte)0xe2, (byte)0x81, (byte)0xb8, (byte)0x17, (byte)0xc4, (byte)0x00, 
        (byte)0x08, (byte)0x20, (byte)0x26, (byte)0x20, (byte)0x8e, (byte)0x05, (byte)0xe2, (byte)0x8f, (byte)0x20, (byte)0x0e, 
        (byte)0x40, (byte)0x00, (byte)0xa1, (byte)0x20, (byte)0x80, (byte)0x00, (byte)0x62, (byte)0x06, (byte)0xe2, (byte)0x7d, 
        (byte)0x40, (byte)0xdc, (byte)0x0a, (byte)0xc4, (byte)0xff, (byte)0x00, (byte)0x02, (byte)0x08, (byte)0x26, (byte)0xb8, 
        (byte)0x07, (byte)0x88, (byte)0xd5, (byte)0xa1, (byte)0xec, (byte)0x7b, (byte)0x30, (byte)0x41, (byte)0x80, (byte)0x00, 
        (byte)0xc2, (byte)0x8b, (byte)0x00, (byte)0x02, (byte)0x88, (byte)0x19, (byte)0x89, (byte)0x1d, (byte)0x03, (byte)0xc4, 
        (byte)0x2f, (byte)0x81, (byte)0x78, (byte)0x06, (byte)0x10, (byte)0x73, (byte)0x03, (byte)0xf1, (byte)0x25, (byte)0x80, 
        (byte)0x00, (byte)0x42, (byte)0xf6, (byte)0x0c, (byte)0xc8, (byte)0xd8, (byte)0x3a, (byte)0x98, (byte)0x4a, (byte)0x80, 
        (byte)0x00, (byte)0x02, (byte)0x21, (byte)0x5f, (byte)0x28, (byte)0xdd, (byte)0x8b, (byte)0x2c, (byte)0x08, (byte)0x10, 
        (byte)0x40, (byte)0xcc, (byte)0x50, (byte)0x95, (byte)0xb7, (byte)0x80, (byte)0xf8, (byte)0x0b, (byte)0x10, (byte)0x73, 
        (byte)0x01, (byte)0xf1, (byte)0x5b, (byte)0x90, (byte)0x04, (byte)0x40, (byte)0x00, (byte)0xe1, (byte)0x44, (byte)0x00, 
        (byte)0x01, (byte)0x84, (byte)0x8c, (byte)0x5c, (byte)0x91, (byte)0x1c, (byte)0x72, (byte)0x19, (byte)0x20, (byte)0x80, 
        (byte)0x98, (byte)0xa0, (byte)0x9c, (byte)0x16, (byte)0x20, (byte)0x9e, (byte)0x0e, (byte)0x65, (byte)0x5b, (byte)0x00, 
        (byte)0xf1, (byte)0x41, (byte)0x80, (byte)0x00, (byte)0x62, (byte)0x46, (byte)0xb2, (byte)0xeb, (byte)0x01, (byte)0x10, 
        (byte)0xf3, (byte)0x02, (byte)0xb1, (byte)0x39, (byte)0x10, (byte)0x2b, (byte)0x03, (byte)0x04, (byte)0x10, (byte)0xcc, 
        (byte)0x55, (byte)0xcb, (byte)0xa0, (byte)0x21, (byte)0x01, (byte)0x73, (byte)0x36, (byte)0x8c, (byte)0x6d, (byte)0x05, 
        (byte)0xc4, (byte)0x47, (byte)0xd1, (byte)0xed, (byte)0x04, (byte)0x08, (byte)0x20, (byte)0x64, (byte)0xef, (byte)0xec, 
        (byte)0xc1, (byte)0x22, (byte)0x0e, (byte)0xf2, (byte)0x5e, (byte)0x01, (byte)0xba, (byte)0x20, (byte)0x40, (byte)0x00, 
        (byte)0xc1, (byte)0xbc, (byte)0x19, (byte)0x0c, (byte)0xc4, (byte)0x5a, (byte)0x40, (byte)0xfc, (byte)0x03, (byte)0x1a, 
        (byte)0x62, (byte)0x3b, (byte)0x81, (byte)0x38, (byte)0x10, (byte)0x88, (byte)0x25, (byte)0x80, (byte)0x58, (byte)0x0d, 
        (byte)0x88, (byte)0xef, (byte)0x00, (byte)0xf1, (byte)0x63, (byte)0x98, (byte)0x26, (byte)0x80, (byte)0x00, (byte)0x62, 
        (byte)0xc4, (byte)0x62, (byte)0x3a, (byte)0xc8, (byte)0xa7, (byte)0x4b, (byte)0xa0, (byte)0x6c, (byte)0x71, (byte)0x20, 
        (byte)0xae, (byte)0x85, (byte)0x6a, (byte)0x02, (byte)0x81, (byte)0xab, (byte)0x40, (byte)0xbc, (byte)0x1b, (byte)0x20, 
        (byte)0x80, (byte)0x98, (byte)0xb0, (byte)0x68, (byte)0x78, (byte)0x09, (byte)0x8d, (byte)0x7a, (byte)0x06, (byte)0x28, 
        (byte)0x9b, (byte)0x1f, (byte)0x88, (byte)0xdf, (byte)0x00, (byte)0xf1, (byte)0x7e, (byte)0x20, (byte)0x8e, (byte)0x03, 
        (byte)0x09, (byte)0x02, (byte)0x04, (byte)0x10, (byte)0xb2, (byte)0x26, (byte)0x7d, (byte)0x68, (byte)0xca, (byte)0xdb, 
        (byte)0x0d, (byte)0xc4, (byte)0xc7, (byte)0xa0, (byte)0xc1, (byte)0x89, (byte)0x0c, (byte)0x2e, (byte)0xc2, (byte)0x0c, 
        (byte)0x06, (byte)0x08, (byte)0x30, (byte)0x00, (byte)0x84, (byte)0x8e, (byte)0x2c, (byte)0x30, (byte)0x86, (byte)0x31, 
        (byte)0xc1, (byte)0x68, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x49, (byte)0x45, (byte)0x4e, (byte)0x44, 
        (byte)0xae, (byte)0x42, (byte)0x60, (byte)0x82};
/** ok.png */
    private byte[] ok =
    { (byte)0x89, (byte)0x50, (byte)0x4e, (byte)0x47, (byte)0x0d, (byte)0x0a, (byte)0x1a, (byte)0x0a, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x0d, (byte)0x49, (byte)0x48, (byte)0x44, (byte)0x52, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, (byte)0x08, (byte)0x06, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x05, 
        (byte)0xec, (byte)0xd4, (byte)0xea, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04, (byte)0x67, (byte)0x41, (byte)0x4d, 
        (byte)0x41, (byte)0x00, (byte)0x00, (byte)0xaf, (byte)0xc8, (byte)0x37, (byte)0x05, (byte)0x8a, (byte)0xe9, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x19, (byte)0x74, (byte)0x45, (byte)0x58, (byte)0x74, (byte)0x53, (byte)0x6f, (byte)0x66, 
        (byte)0x74, (byte)0x77, (byte)0x61, (byte)0x72, (byte)0x65, (byte)0x00, (byte)0x41, (byte)0x64, (byte)0x6f, (byte)0x62, 
        (byte)0x65, (byte)0x20, (byte)0x49, (byte)0x6d, (byte)0x61, (byte)0x67, (byte)0x65, (byte)0x52, (byte)0x65, (byte)0x61, 
        (byte)0x64, (byte)0x79, (byte)0x71, (byte)0xc9, (byte)0x65, (byte)0x3c, (byte)0x00, (byte)0x00, (byte)0x01, (byte)0x05, 
        (byte)0x49, (byte)0x44, (byte)0x41, (byte)0x54, (byte)0x78, (byte)0xda, (byte)0x62, (byte)0xf8, (byte)0xff, (byte)0xff, 
        (byte)0x3f, (byte)0x03, (byte)0x13, (byte)0x13, (byte)0x13, (byte)0x03, (byte)0x40, (byte)0x00, (byte)0x31, (byte)0x31, 
        (byte)0x40, (byte)0x01, (byte)0x40, (byte)0x00, (byte)0x31, (byte)0x82, (byte)0x78, (byte)0x40, (byte)0xe0, (byte)0x00, 
        (byte)0x10, (byte)0x40, (byte)0x20, (byte)0x61, (byte)0x03, (byte)0x10, (byte)0x07, (byte)0x20, (byte)0x80, (byte)0x18, 
        (byte)0xe0, (byte)0x6a, (byte)0x98, (byte)0x98, (byte)0xee, (byte)0x83, (byte)0x68, (byte)0x80, (byte)0x00, (byte)0x62, 
        (byte)0x04, (byte)0x09, (byte)0x20, (byte)0x03, (byte)0x80, (byte)0x00, (byte)0x82, (byte)0xe9, (byte)0x01, (byte)0x03, 
        (byte)0x80, (byte)0x00, (byte)0x62, (byte)0x42, (byte)0x96, (byte)0x01, (byte)0x08, (byte)0x20, (byte)0x66, (byte)0x46, 
        (byte)0x46, (byte)0xc6, (byte)0x7a, (byte)0x90, (byte)0x0a, (byte)0x20, (byte)0x7e, (byte)0x00, (byte)0x10, (byte)0x40, 
        (byte)0x28, (byte)0xfa, (byte)0x00, (byte)0x02, (byte)0x08, (byte)0xd9, (byte)0x54, (byte)0x64, (byte)0x7c, (byte)0x1e, 
        (byte)0x44, (byte)0x03, (byte)0x04, (byte)0x10, (byte)0x4c, (byte)0xd2, (byte)0x00, (byte)0x2a, (byte)0xb8, (byte)0x1f, 
        (byte)0x59, (byte)0x11, (byte)0x40, (byte)0x00, (byte)0x81, (byte)0x8d, (byte)0x61, (byte)0x66, (byte)0x66, (byte)0x06, 
        (byte)0x1b, (byte)0x02, (byte)0x35, (byte)0x1b, (byte)0x0e, (byte)0x00, (byte)0x02, (byte)0x08, (byte)0xc5, (byte)0x29, 
        (byte)0xc8, (byte)0x00, (byte)0x20, (byte)0x80, (byte)0x58, (byte)0xb0, (byte)0x88, (byte)0x19, (byte)0x80, (byte)0x08, 
        (byte)0x80, (byte)0x00, (byte)0x62, (byte)0xc2, (byte)0x26, (byte)0x08, (byte)0x04, (byte)0x17, (byte)0x00, (byte)0x02, 
        (byte)0x08, (byte)0x5d, (byte)0xc2, (byte)0x1f, (byte)0x24, (byte)0x08, (byte)0x62, (byte)0x00, (byte)0x04, (byte)0x10, 
        (byte)0xcc, (byte)0xa8, (byte)0xf7, (byte)0x40, (byte)0x2c, (byte)0x80, (byte)0xec, (byte)0x00, (byte)0x80, (byte)0x00, 
        (byte)0x82, (byte)0xe9, (byte)0x58, (byte)0x00, (byte)0xc4, (byte)0x8e, (byte)0xc8, (byte)0x5a, (byte)0x01, (byte)0x02, 
        (byte)0x08, (byte)0x23, (byte)0xc4, (byte)0x60, (byte)0x00, (byte)0x20, (byte)0x80, (byte)0x90, (byte)0xfd, (byte)0x42, 
        (byte)0x08, (byte)0x80, (byte)0xac, (byte)0xea, (byte)0x07, (byte)0xe2, (byte)0x8d, (byte)0x00, (byte)0x01, (byte)0x84, 
        (byte)0x2b, (byte)0xe8, (byte)0x90, (byte)0xb1, (byte)0x01, (byte)0x34, (byte)0xb2, (byte)0x60, (byte)0x21, (byte)0xc8, 
        (byte)0x00, (byte)0x10, (byte)0x40, (byte)0x4c, (byte)0x04, (byte)0x4c, (byte)0x86, (byte)0x79, (byte)0x46, (byte)0x11, 
        (byte)0xe6, (byte)0x4b, (byte)0x10, (byte)0x00, (byte)0x08, (byte)0x20, (byte)0x98, (byte)0x4d, (byte)0x0e, (byte)0x40, 
        (byte)0xfc, (byte)0x1f, (byte)0x88, (byte)0x0b, (byte)0xa0, (byte)0xa6, (byte)0xd5, (byte)0xc3, (byte)0x22, (byte)0x0a, 
        (byte)0x1b, (byte)0x06, (byte)0x08, (byte)0x20, (byte)0x64, (byte)0xe7, (byte)0x09, (byte)0x00, (byte)0xf1, (byte)0x7b, 
        (byte)0x28, (byte)0x5e, (byte)0x8f, (byte)0xcf, (byte)0xc9, (byte)0x00, (byte)0x01, (byte)0x84, (byte)0x1e, (byte)0x10, 
        (byte)0x06, (byte)0x50, (byte)0xe7, (byte)0x1c, (byte)0xc0, (byte)0x17, (byte)0x22, (byte)0x00, (byte)0x01, (byte)0x06, 
        (byte)0x00, (byte)0x3b, (byte)0x85, (byte)0x3d, (byte)0x34, (byte)0xf3, (byte)0xcf, (byte)0x64, (byte)0xe7, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x49, (byte)0x45, (byte)0x4e, (byte)0x44, (byte)0xae, (byte)0x42, (byte)0x60, 
        (byte)0x82};
/** shift.png */
    private byte[] shift =
    { (byte)0x89, (byte)0x50, (byte)0x4e, (byte)0x47, (byte)0x0d, (byte)0x0a, (byte)0x1a, (byte)0x0a, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x0d, (byte)0x49, (byte)0x48, (byte)0x44, (byte)0x52, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, (byte)0x08, (byte)0x03, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x45, 
        (byte)0x35, (byte)0x14, (byte)0x4e, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04, (byte)0x67, (byte)0x41, (byte)0x4d, 
        (byte)0x41, (byte)0x00, (byte)0x00, (byte)0xb1, (byte)0x8e, (byte)0x7c, (byte)0xfb, (byte)0x51, (byte)0x93, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x20, (byte)0x63, (byte)0x48, (byte)0x52, (byte)0x4d, (byte)0x00, (byte)0x00, (byte)0x7a, 
        (byte)0x25, (byte)0x00, (byte)0x00, (byte)0x80, (byte)0x83, (byte)0x00, (byte)0x00, (byte)0xf9, (byte)0xff, (byte)0x00, 
        (byte)0x00, (byte)0x80, (byte)0xe6, (byte)0x00, (byte)0x00, (byte)0x75, (byte)0x2e, (byte)0x00, (byte)0x00, (byte)0xea, 
        (byte)0x5f, (byte)0x00, (byte)0x00, (byte)0x3a, (byte)0x97, (byte)0x00, (byte)0x00, (byte)0x17, (byte)0x6f, (byte)0x69, 
        (byte)0xe4, (byte)0xc4, (byte)0x2b, (byte)0x00, (byte)0x00, (byte)0x03, (byte)0x00, (byte)0x50, (byte)0x4c, (byte)0x54, 
        (byte)0x45, (byte)0xe6, (byte)0xe6, (byte)0xe6, (byte)0xcc, (byte)0xcc, (byte)0xcc, (byte)0x7d, (byte)0x7d, (byte)0x7d, 
        (byte)0xff, (byte)0xff, (byte)0xff, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xa0, 
        (byte)0xe5, (byte)0xcc, (byte)0x14, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x04, (byte)0x74, (byte)0x52, (byte)0x4e, 
        (byte)0x53, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0x00, (byte)0x40, (byte)0x2a, (byte)0xa9, (byte)0xf4, (byte)0x00, 
        (byte)0x00, (byte)0x00, (byte)0x60, (byte)0x49, (byte)0x44, (byte)0x41, (byte)0x54, (byte)0x78, (byte)0x9c, (byte)0x62, 
        (byte)0x60, (byte)0x06, (byte)0x03, (byte)0x46, (byte)0x08, (byte)0x05, (byte)0x10, (byte)0x40, (byte)0x0c, (byte)0x10, 
        (byte)0x0e, (byte)0x03, (byte)0x13, (byte)0x98, (byte)0x06, (byte)0x08, (byte)0x20, (byte)0x06, (byte)0x08, (byte)0x87, 
        (byte)0x01, (byte)0xc2, (byte)0x05, (byte)0x08, (byte)0x20, (byte)0x06, (byte)0x28, (byte)0x07, (byte)0xc2, (byte)0x05, 
        (byte)0x08, (byte)0x20, (byte)0x06, (byte)0x18, (byte)0x07, (byte)0xcc, (byte)0x05, (byte)0x08, (byte)0x20, (byte)0x06, 
        (byte)0x38, (byte)0x07, (byte)0xc4, (byte)0x05, (byte)0x08, (byte)0x20, (byte)0x06, (byte)0x46, (byte)0x26, (byte)0x26, 
        (byte)0x26, (byte)0xb0, (byte)0x3e, (byte)0x10, (byte)0x00, (byte)0x08, (byte)0x20, (byte)0x54, (byte)0x53, (byte)0x00, 
        (byte)0x02, (byte)0x08, (byte)0x95, (byte)0x07, (byte)0x10, (byte)0x40, (byte)0xa8, (byte)0x3c, (byte)0x80, (byte)0x00, 
        (byte)0x42, (byte)0xe5, (byte)0x01, (byte)0x04, (byte)0x10, (byte)0x2a, (byte)0x0f, (byte)0x20, (byte)0x80, (byte)0x20, 
        (byte)0x3c, (byte)0x90, (byte)0x79, (byte)0x20, (byte)0x06, (byte)0x40, (byte)0x80, (byte)0x01, (byte)0x00, (byte)0x74, 
        (byte)0xd7, (byte)0x01, (byte)0x49, (byte)0x4a, (byte)0xc4, (byte)0x00, (byte)0x8f, (byte)0x00, (byte)0x00, (byte)0x00, 
        (byte)0x00, (byte)0x49, (byte)0x45, (byte)0x4e, (byte)0x44, (byte)0xae, (byte)0x42, (byte)0x60, (byte)0x82};

    private byte[] cn = {    (byte)0x89, 
    (byte)0x50, (byte)0x4e, (byte)0x47, (byte)0x0d, (byte)0x0a, (byte)0x1a, (byte)0x0a, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, (byte)0x49, 
    (byte)0x48, (byte)0x44, (byte)0x52, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x0d, (byte)0x08, 
    (byte)0x02, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0xfd, (byte)0x89, (byte)0x73, (byte)0x2b, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x01, 
    (byte)0x73, (byte)0x52, (byte)0x47, (byte)0x42, (byte)0x00, (byte)0xae, (byte)0xce, (byte)0x1c, (byte)0xe9, (byte)0x00, (byte)0x00, (byte)0x00, 
    (byte)0x04, (byte)0x67, (byte)0x41, (byte)0x4d, (byte)0x41, (byte)0x00, (byte)0x00, (byte)0xb1, (byte)0x8f, (byte)0x0b, (byte)0xfc, (byte)0x61, 
    (byte)0x05, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x20, (byte)0x63, (byte)0x48, (byte)0x52, (byte)0x4d, (byte)0x00, (byte)0x00, (byte)0x7a, 
    (byte)0x26, (byte)0x00, (byte)0x00, (byte)0x80, (byte)0x84, (byte)0x00, (byte)0x00, (byte)0xfa, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x80, 
    (byte)0xe8, (byte)0x00, (byte)0x00, (byte)0x75, (byte)0x30, (byte)0x00, (byte)0x00, (byte)0xea, (byte)0x60, (byte)0x00, (byte)0x00, (byte)0x3a, 
    (byte)0x98, (byte)0x00, (byte)0x00, (byte)0x17, (byte)0x70, (byte)0x9c, (byte)0xba, (byte)0x51, (byte)0x3c, (byte)0x00, (byte)0x00, (byte)0x00, 
    (byte)0x33, (byte)0x49, (byte)0x44, (byte)0x41, (byte)0x54, (byte)0x28, (byte)0x53, (byte)0x63, (byte)0xfc, (byte)0xff, (byte)0xff, (byte)0x3f, 
    (byte)0x03, (byte)0x31, (byte)0x00, (byte)0xa8, (byte)0x0e, (byte)0x0d, (byte)0x00, (byte)0x75, (byte)0x61, (byte)0x11, (byte)0x24, (byte)0x4d, 
    (byte)0x1d, (byte)0x1e, (byte)0x9b, (byte)0x21, (byte)0x06, (byte)0x41, (byte)0xad, (byte)0x40, (byte)0xb6, (byte)0x0b, (byte)0x2b, (byte)0x7b, 
    (byte)0xe0, (byte)0xd5, (byte)0xe1, (byte)0xf2, (byte)0x0a, (byte)0x8a, (byte)0x3f, (byte)0x90, (byte)0x43, (byte)0x87, (byte)0x1a, (byte)0xe1, 
    (byte)0x47, (byte)0x35, (byte)0xf3, (byte)0x00, (byte)0x1d, (byte)0x23, (byte)0x69, (byte)0xa6, (byte)0xf7, (byte)0x74, (byte)0x7d, (byte)0x20, 
    (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x00, (byte)0x49, (byte)0x45, (byte)0x4e, (byte)0x44, (byte)0xae, (byte)0x42, (byte)0x60, (byte)0x82};
    
    // ********* attributes ********* //

    private final static int WHITE = 0xffffff;

    // gray scheme
    //private final static int DARK_GRAY = 0x555555;
    //private final static int GRAY = 0x999999;
    //private final static int LIGHT_GRAY = 0xcccccc;

    // blue scheme
    private final static int DARK_GRAY = 0x666699; // dark blue
    private final static int GRAY = 0x3366cc;//0x8DB0D9;
    private final static int LIGHT_GRAY = 0x6699ff;//0xccccff
    private final static int TEXT_COLOR = 0xCCFFFF;//0xccccff

    /** padding between rows of buttons */
    private int PADDING;
    /** padding used by the meta keys */
    private final static int META_PADDING = 2;
    /** size of meta icons */
    private final static int IMAGE_SIZE = 13;

    // If you want to change the order of the buttons, just
    // change the serial numbers here:
    final static int OK_META_KEY = 0;
    final static int CANCEL_META_KEY = 1;
    final static int MODE_META_KEY = 2;
    final static int BACKSPACE_META_KEY = 3;
    final static int SHIFT_META_KEY = 4;
    final static int CAPS_META_KEY = 5;
    final static int CNINPUT_META_KEY = 6;

    //When input method is changed, process this key to update UI 
    final static int IM_CHANGED_KEY = 99;

}

class VirtualKeyboardException extends Exception {
    /**
     * Constructs an <code>IOException</code> with <code>null</code>
     * as its error detail message.
     */
    public VirtualKeyboardException() {
    super();
    }

    /**
     * Constructs an <code>IOException</code> with the specified detail
     * message. The error message string <code>s</code> can later be
     * retrieved by the <code>{@link java.lang.Throwable#getMessage}</code>
     * method of class <code>java.lang.Throwable</code>.
     *
     * @param   s   the detail message.
     */
    public VirtualKeyboardException(String s) {
    super(s);
    }
}

